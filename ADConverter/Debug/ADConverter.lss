
ADConverter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00802000  00001a1a  00001aae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000067  00802024  00802024  00001ad2  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00001ad2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f8  00000000  00000000  00001b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000058e0  00000000  00000000  00001d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000037df  00000000  00000000  0000764c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001514  00000000  00000000  0000ae2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000073c  00000000  00000000  0000c340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003532  00000000  00000000  0000ca7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ed5  00000000  00000000  0000ffae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00010e83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      38:	0c 94 81 03 	jmp	0x702	; 0x702 <__vector_14>
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      9c:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__vector_39>
      a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     11c:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__vector_71>
     120:	0c 94 b8 04 	jmp	0x970	; 0x970 <__vector_72>
     124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b0:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__vector_108>
     1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e3       	ldi	r29, 0x3F	; 63
     206:	de bf       	out	0x3e, r29	; 62
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	ea e1       	ldi	r30, 0x1A	; 26
     214:	fa e1       	ldi	r31, 0x1A	; 26
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a4 32       	cpi	r26, 0x24	; 36
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	20 e2       	ldi	r18, 0x20	; 32
     228:	a4 e2       	ldi	r26, 0x24	; 36
     22a:	b0 e2       	ldi	r27, 0x20	; 32
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	ab 38       	cpi	r26, 0x8B	; 139
     232:	b2 07       	cpc	r27, r18
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 6e 03 	call	0x6dc	; 0x6dc <main>
     23a:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <initButtons>:
 #define BUTTON_PRESS_SHORT			100
 #define BUTTON_PRESS_LONG			500

 

 void initButtons(void) {
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRCLR = PIN4_bm; //SW1
     24a:	80 ea       	ldi	r24, 0xA0	; 160
     24c:	96 e0       	ldi	r25, 0x06	; 6
     24e:	20 e1       	ldi	r18, 0x10	; 16
     250:	fc 01       	movw	r30, r24
     252:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN5_bm; //SW2
     254:	80 ea       	ldi	r24, 0xA0	; 160
     256:	96 e0       	ldi	r25, 0x06	; 6
     258:	20 e2       	ldi	r18, 0x20	; 32
     25a:	fc 01       	movw	r30, r24
     25c:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN6_bm; //SW3
     25e:	80 ea       	ldi	r24, 0xA0	; 160
     260:	96 e0       	ldi	r25, 0x06	; 6
     262:	20 e4       	ldi	r18, 0x40	; 64
     264:	fc 01       	movw	r30, r24
     266:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN7_bm; //SW4
     268:	80 ea       	ldi	r24, 0xA0	; 160
     26a:	96 e0       	ldi	r25, 0x06	; 6
     26c:	20 e8       	ldi	r18, 0x80	; 128
     26e:	fc 01       	movw	r30, r24
     270:	22 83       	std	Z+2, r18	; 0x02
 }
     272:	00 00       	nop
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <updateButtons>:
 button_press_t b1Status;
 button_press_t b2Status;
 button_press_t b3Status;
 button_press_t b4Status;

 void updateButtons(void) {
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	cd b7       	in	r28, 0x3d	; 61
     280:	de b7       	in	r29, 0x3e	; 62
	static uint16_t b1Count = 0;
	static uint16_t b2Count = 0;
	static uint16_t b3Count = 0;
	static uint16_t b4Count = 0;
	if(Button1_Value == 0) {
     282:	80 ea       	ldi	r24, 0xA0	; 160
     284:	96 e0       	ldi	r25, 0x06	; 6
     286:	fc 01       	movw	r30, r24
     288:	80 85       	ldd	r24, Z+8	; 0x08
     28a:	88 2f       	mov	r24, r24
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	80 71       	andi	r24, 0x10	; 16
     290:	99 27       	eor	r25, r25
     292:	95 95       	asr	r25
     294:	87 95       	ror	r24
     296:	95 95       	asr	r25
     298:	87 95       	ror	r24
     29a:	95 95       	asr	r25
     29c:	87 95       	ror	r24
     29e:	95 95       	asr	r25
     2a0:	87 95       	ror	r24
     2a2:	89 2b       	or	r24, r25
     2a4:	89 f4       	brne	.+34     	; 0x2c8 <updateButtons+0x4e>
		if(b1Count < 60000) {
     2a6:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <__data_end>
     2aa:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <__data_end+0x1>
     2ae:	80 36       	cpi	r24, 0x60	; 96
     2b0:	9a 4e       	sbci	r25, 0xEA	; 234
     2b2:	20 f5       	brcc	.+72     	; 0x2fc <updateButtons+0x82>
			b1Count++;
     2b4:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <__data_end>
     2b8:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <__data_end+0x1>
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	80 93 24 20 	sts	0x2024, r24	; 0x802024 <__data_end>
     2c2:	90 93 25 20 	sts	0x2025, r25	; 0x802025 <__data_end+0x1>
     2c6:	1a c0       	rjmp	.+52     	; 0x2fc <updateButtons+0x82>
		}
	} else {
		if(b1Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     2c8:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <__data_end>
     2cc:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <__data_end+0x1>
     2d0:	0b 97       	sbiw	r24, 0x0b	; 11
     2d2:	68 f0       	brcs	.+26     	; 0x2ee <updateButtons+0x74>
			if(b1Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     2d4:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <__data_end>
     2d8:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <__data_end+0x1>
     2dc:	c3 97       	sbiw	r24, 0x33	; 51
     2de:	18 f0       	brcs	.+6      	; 0x2e6 <updateButtons+0x6c>
				//Button was pressed Long
				b1Status = LONG_PRESSED;
     2e0:	10 92 2f 20 	sts	0x202F, r1	; 0x80202f <b1Status>
     2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <updateButtons+0x7a>
			} else {
				//Button was pressed Short	
				b1Status = SHORT_PRESSED;
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	80 93 2f 20 	sts	0x202F, r24	; 0x80202f <b1Status>
     2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <updateButtons+0x7a>
			}
		} else {
			b1Status = NOT_PRESSED;
     2ee:	82 e0       	ldi	r24, 0x02	; 2
     2f0:	80 93 2f 20 	sts	0x202F, r24	; 0x80202f <b1Status>
		}
		b1Count = 0;
     2f4:	10 92 24 20 	sts	0x2024, r1	; 0x802024 <__data_end>
     2f8:	10 92 25 20 	sts	0x2025, r1	; 0x802025 <__data_end+0x1>
	}
	if(Button2_Value == 0) {
     2fc:	80 ea       	ldi	r24, 0xA0	; 160
     2fe:	96 e0       	ldi	r25, 0x06	; 6
     300:	fc 01       	movw	r30, r24
     302:	80 85       	ldd	r24, Z+8	; 0x08
     304:	88 2f       	mov	r24, r24
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	80 72       	andi	r24, 0x20	; 32
     30a:	99 27       	eor	r25, r25
     30c:	95 95       	asr	r25
     30e:	87 95       	ror	r24
     310:	95 95       	asr	r25
     312:	87 95       	ror	r24
     314:	95 95       	asr	r25
     316:	87 95       	ror	r24
     318:	95 95       	asr	r25
     31a:	87 95       	ror	r24
     31c:	95 95       	asr	r25
     31e:	87 95       	ror	r24
     320:	89 2b       	or	r24, r25
     322:	89 f4       	brne	.+34     	; 0x346 <updateButtons+0xcc>
		if(b2Count < 60000) {
     324:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <b2Count.3830>
     328:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <b2Count.3830+0x1>
     32c:	80 36       	cpi	r24, 0x60	; 96
     32e:	9a 4e       	sbci	r25, 0xEA	; 234
     330:	20 f5       	brcc	.+72     	; 0x37a <updateButtons+0x100>
			b2Count++;
     332:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <b2Count.3830>
     336:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <b2Count.3830+0x1>
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <b2Count.3830>
     340:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <b2Count.3830+0x1>
     344:	1a c0       	rjmp	.+52     	; 0x37a <updateButtons+0x100>
		}
	} else {
		if(b2Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     346:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <b2Count.3830>
     34a:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <b2Count.3830+0x1>
     34e:	0b 97       	sbiw	r24, 0x0b	; 11
     350:	68 f0       	brcs	.+26     	; 0x36c <updateButtons+0xf2>
			if(b2Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     352:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <b2Count.3830>
     356:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <b2Count.3830+0x1>
     35a:	c3 97       	sbiw	r24, 0x33	; 51
     35c:	18 f0       	brcs	.+6      	; 0x364 <updateButtons+0xea>
				//Button was pressed Long
				b2Status = LONG_PRESSED;
     35e:	10 92 30 20 	sts	0x2030, r1	; 0x802030 <b2Status>
     362:	07 c0       	rjmp	.+14     	; 0x372 <updateButtons+0xf8>
				} else {
				//Button was pressed Short
				b2Status = SHORT_PRESSED;
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	80 93 30 20 	sts	0x2030, r24	; 0x802030 <b2Status>
     36a:	03 c0       	rjmp	.+6      	; 0x372 <updateButtons+0xf8>
			}
		} else {
			b2Status = NOT_PRESSED;			
     36c:	82 e0       	ldi	r24, 0x02	; 2
     36e:	80 93 30 20 	sts	0x2030, r24	; 0x802030 <b2Status>
		}
		b2Count = 0;
     372:	10 92 26 20 	sts	0x2026, r1	; 0x802026 <b2Count.3830>
     376:	10 92 27 20 	sts	0x2027, r1	; 0x802027 <b2Count.3830+0x1>
	}
	if(Button3_Value == 0) {
     37a:	80 ea       	ldi	r24, 0xA0	; 160
     37c:	96 e0       	ldi	r25, 0x06	; 6
     37e:	fc 01       	movw	r30, r24
     380:	80 85       	ldd	r24, Z+8	; 0x08
     382:	88 2f       	mov	r24, r24
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	80 74       	andi	r24, 0x40	; 64
     388:	99 27       	eor	r25, r25
     38a:	08 2e       	mov	r0, r24
     38c:	89 2f       	mov	r24, r25
     38e:	00 0c       	add	r0, r0
     390:	88 1f       	adc	r24, r24
     392:	99 0b       	sbc	r25, r25
     394:	00 0c       	add	r0, r0
     396:	88 1f       	adc	r24, r24
     398:	99 1f       	adc	r25, r25
     39a:	89 2b       	or	r24, r25
     39c:	89 f4       	brne	.+34     	; 0x3c0 <updateButtons+0x146>
		if(b3Count < 60000) {
     39e:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <b3Count.3831>
     3a2:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <b3Count.3831+0x1>
     3a6:	80 36       	cpi	r24, 0x60	; 96
     3a8:	9a 4e       	sbci	r25, 0xEA	; 234
     3aa:	20 f5       	brcc	.+72     	; 0x3f4 <updateButtons+0x17a>
			b3Count++;
     3ac:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <b3Count.3831>
     3b0:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <b3Count.3831+0x1>
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <b3Count.3831>
     3ba:	90 93 29 20 	sts	0x2029, r25	; 0x802029 <b3Count.3831+0x1>
     3be:	1a c0       	rjmp	.+52     	; 0x3f4 <updateButtons+0x17a>
		}
	} else {
		if(b3Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3c0:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <b3Count.3831>
     3c4:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <b3Count.3831+0x1>
     3c8:	0b 97       	sbiw	r24, 0x0b	; 11
     3ca:	68 f0       	brcs	.+26     	; 0x3e6 <updateButtons+0x16c>
			if(b3Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     3cc:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <b3Count.3831>
     3d0:	90 91 29 20 	lds	r25, 0x2029	; 0x802029 <b3Count.3831+0x1>
     3d4:	c3 97       	sbiw	r24, 0x33	; 51
     3d6:	18 f0       	brcs	.+6      	; 0x3de <updateButtons+0x164>
				//Button was pressed Long
				b3Status = LONG_PRESSED;
     3d8:	10 92 31 20 	sts	0x2031, r1	; 0x802031 <b3Status>
     3dc:	07 c0       	rjmp	.+14     	; 0x3ec <updateButtons+0x172>
				} else {
				//Button was pressed Short
				b3Status = SHORT_PRESSED;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	80 93 31 20 	sts	0x2031, r24	; 0x802031 <b3Status>
     3e4:	03 c0       	rjmp	.+6      	; 0x3ec <updateButtons+0x172>
			}
		} else {
			b3Status = NOT_PRESSED;
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	80 93 31 20 	sts	0x2031, r24	; 0x802031 <b3Status>
		}
		b3Count = 0;
     3ec:	10 92 28 20 	sts	0x2028, r1	; 0x802028 <b3Count.3831>
     3f0:	10 92 29 20 	sts	0x2029, r1	; 0x802029 <b3Count.3831+0x1>
	}
	if(Button4_Value == 0) {
     3f4:	80 ea       	ldi	r24, 0xA0	; 160
     3f6:	96 e0       	ldi	r25, 0x06	; 6
     3f8:	fc 01       	movw	r30, r24
     3fa:	80 85       	ldd	r24, Z+8	; 0x08
     3fc:	88 23       	and	r24, r24
     3fe:	8c f0       	brlt	.+34     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		if(b4Count < 60000) {
     400:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <b4Count.3832>
     404:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <b4Count.3832+0x1>
     408:	80 36       	cpi	r24, 0x60	; 96
     40a:	9a 4e       	sbci	r25, 0xEA	; 234
     40c:	20 f5       	brcc	.+72     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			b4Count++;
     40e:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <b4Count.3832>
     412:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <b4Count.3832+0x1>
     416:	01 96       	adiw	r24, 0x01	; 1
     418:	80 93 2a 20 	sts	0x202A, r24	; 0x80202a <b4Count.3832>
     41c:	90 93 2b 20 	sts	0x202B, r25	; 0x80202b <b4Count.3832+0x1>
		} else {
			b4Status = NOT_PRESSED;
		}
		b4Count = 0;
	}
 }
     420:	1a c0       	rjmp	.+52     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	if(Button4_Value == 0) {
		if(b4Count < 60000) {
			b4Count++;
		}
	} else {
		if(b4Count > (BUTTON_PRESS_SHORT / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     422:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <b4Count.3832>
     426:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <b4Count.3832+0x1>
     42a:	0b 97       	sbiw	r24, 0x0b	; 11
     42c:	68 f0       	brcs	.+26     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
			if(b4Count > (BUTTON_PRESS_LONG / (1000/BUTTON_UPDATE_FREQUENCY_HZ))) {
     42e:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <b4Count.3832>
     432:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <b4Count.3832+0x1>
     436:	c3 97       	sbiw	r24, 0x33	; 51
     438:	18 f0       	brcs	.+6      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
				//Button was pressed Long
				b4Status = LONG_PRESSED;
     43a:	10 92 32 20 	sts	0x2032, r1	; 0x802032 <b4Status>
     43e:	07 c0       	rjmp	.+14     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
				} else {
				//Button was pressed Short
				b4Status = SHORT_PRESSED;
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <b4Status>
     446:	03 c0       	rjmp	.+6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			}
		} else {
			b4Status = NOT_PRESSED;
     448:	82 e0       	ldi	r24, 0x02	; 2
     44a:	80 93 32 20 	sts	0x2032, r24	; 0x802032 <b4Status>
		}
		b4Count = 0;
     44e:	10 92 2a 20 	sts	0x202A, r1	; 0x80202a <b4Count.3832>
     452:	10 92 2b 20 	sts	0x202B, r1	; 0x80202b <b4Count.3832+0x1>
	}
 }
     456:	00 00       	nop
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <writeCCP>:
 * Created: 18.09.2017 22:39:42
 *  Author: mburger
 */ 
 #include <avr/io.h>

 void writeCCP(volatile register8_t* address, uint8_t value) {
     45e:	0f 93       	push	r16
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	25 97       	sbiw	r28, 0x05	; 5
     46a:	cd bf       	out	0x3d, r28	; 61
     46c:	de bf       	out	0x3e, r29	; 62
     46e:	8b 83       	std	Y+3, r24	; 0x03
     470:	9c 83       	std	Y+4, r25	; 0x04
     472:	6d 83       	std	Y+5, r22	; 0x05
	 volatile uint8_t* tmpAddr = address;
     474:	8b 81       	ldd	r24, Y+3	; 0x03
     476:	9c 81       	ldd	r25, Y+4	; 0x04
     478:	89 83       	std	Y+1, r24	; 0x01
     47a:	9a 83       	std	Y+2, r25	; 0x02
	 asm volatile("movw r30, %0"  "\n\t"
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	9a 81       	ldd	r25, Y+2	; 0x02
     480:	2d 81       	ldd	r18, Y+5	; 0x05
     482:	fc 01       	movw	r30, r24
     484:	08 ed       	ldi	r16, 0xD8	; 216
     486:	04 bf       	out	0x34, r16	; 52
     488:	20 83       	st	Z, r18
	 "st Z, %1"    "\n\t"
	 :
	 : "r" (tmpAddr), "r" (value), "i"(&CCP)
	 : "r16", "r30", "r31"
	 );
 }
     48a:	00 00       	nop
     48c:	25 96       	adiw	r28, 0x05	; 5
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	de bf       	out	0x3e, r29	; 62
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	0f 91       	pop	r16
     498:	08 95       	ret

0000049a <clockInit>:
 void clockInit(void) {
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
	 OSC.XOSCCTRL = OSC_FRQRANGE_2TO9_gc | OSC_XOSCSEL_XTAL_256CLK_gc | OSC_XOSCPWR_bm;
     4a2:	80 e5       	ldi	r24, 0x50	; 80
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	23 e5       	ldi	r18, 0x53	; 83
     4a8:	fc 01       	movw	r30, r24
     4aa:	22 83       	std	Z+2, r18	; 0x02
	 OSC.CTRL |= OSC_XOSCEN_bm;
     4ac:	80 e5       	ldi	r24, 0x50	; 80
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	20 e5       	ldi	r18, 0x50	; 80
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	f9 01       	movw	r30, r18
     4b6:	20 81       	ld	r18, Z
     4b8:	28 60       	ori	r18, 0x08	; 8
     4ba:	fc 01       	movw	r30, r24
     4bc:	20 83       	st	Z, r18
	 while(!(OSC.STATUS & OSC_XOSCRDY_bm));
     4be:	00 00       	nop
     4c0:	80 e5       	ldi	r24, 0x50	; 80
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	fc 01       	movw	r30, r24
     4c6:	81 81       	ldd	r24, Z+1	; 0x01
     4c8:	88 2f       	mov	r24, r24
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	88 70       	andi	r24, 0x08	; 8
     4ce:	99 27       	eor	r25, r25
     4d0:	89 2b       	or	r24, r25
     4d2:	b1 f3       	breq	.-20     	; 0x4c0 <clockInit+0x26>
	 //OSC.CTRL |= OSC_RC32MEN_bm;
	 //while(!(OSC.STATUS & OSC_RC32MRDY_bm));
	 OSC.PLLCTRL = (OSC_PLLSRC_XOSC_gc | 4); //PLL Multiplication Factor
     4d4:	80 e5       	ldi	r24, 0x50	; 80
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	24 ec       	ldi	r18, 0xC4	; 196
     4da:	fc 01       	movw	r30, r24
     4dc:	25 83       	std	Z+5, r18	; 0x05
	 OSC.CTRL |= OSC_PLLEN_bm;
     4de:	80 e5       	ldi	r24, 0x50	; 80
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	20 e5       	ldi	r18, 0x50	; 80
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	f9 01       	movw	r30, r18
     4e8:	20 81       	ld	r18, Z
     4ea:	20 61       	ori	r18, 0x10	; 16
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 83       	st	Z, r18
	 while(!(OSC.STATUS & OSC_PLLRDY_bm));
     4f0:	00 00       	nop
     4f2:	80 e5       	ldi	r24, 0x50	; 80
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	fc 01       	movw	r30, r24
     4f8:	81 81       	ldd	r24, Z+1	; 0x01
     4fa:	88 2f       	mov	r24, r24
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	80 71       	andi	r24, 0x10	; 16
     500:	99 27       	eor	r25, r25
     502:	89 2b       	or	r24, r25
     504:	b1 f3       	breq	.-20     	; 0x4f2 <clockInit+0x58>
	 writeCCP(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);
     506:	64 e0       	ldi	r22, 0x04	; 4
     508:	80 e4       	ldi	r24, 0x40	; 64
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 2f 02 	call	0x45e	; 0x45e <writeCCP>
	 //writeCCP(&CLK.CTRL, CLK_SCLKSEL_RC32M_gc);
     510:	00 00       	nop
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	08 95       	ret

00000518 <read_calibration_byte>:
uint16_t adResult1;
uint16_t adTempRaw;
uint16_t calibrationValue;

uint8_t read_calibration_byte( uint8_t index )
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	25 97       	sbiw	r28, 0x05	; 5
     522:	cd bf       	out	0x3d, r28	; 61
     524:	de bf       	out	0x3e, r29	; 62
     526:	8d 83       	std	Y+5, r24	; 0x05
    uint8_t result;
    /* Load the NVM Command register to read the calibration row. */
    NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     528:	8a ec       	ldi	r24, 0xCA	; 202
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	22 e0       	ldi	r18, 0x02	; 2
     52e:	fc 01       	movw	r30, r24
     530:	20 83       	st	Z, r18
    result = pgm_read_byte(index);
     532:	8d 81       	ldd	r24, Y+5	; 0x05
     534:	88 2f       	mov	r24, r24
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	89 83       	std	Y+1, r24	; 0x01
     53a:	9a 83       	std	Y+2, r25	; 0x02
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	9a 81       	ldd	r25, Y+2	; 0x02
     540:	fc 01       	movw	r30, r24
     542:	84 91       	lpm	r24, Z
     544:	8b 83       	std	Y+3, r24	; 0x03
     546:	8b 81       	ldd	r24, Y+3	; 0x03
     548:	8c 83       	std	Y+4, r24	; 0x04
    /* Clean up NVM Command register. */
    NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     54a:	8a ec       	ldi	r24, 0xCA	; 202
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	fc 01       	movw	r30, r24
     550:	10 82       	st	Z, r1
    return( result );
     552:	8c 81       	ldd	r24, Y+4	; 0x04
}
     554:	25 96       	adiw	r28, 0x05	; 5
     556:	cd bf       	out	0x3d, r28	; 61
     558:	de bf       	out	0x3e, r29	; 62
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <initTimer>:

void initTimer() {
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
	TCC0.CTRLA = TC_CLKSEL_DIV64_gc ;										// Prescaler: 32MHz / 64 = 500kHz
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	98 e0       	ldi	r25, 0x08	; 8
     56c:	25 e0       	ldi	r18, 0x05	; 5
     56e:	fc 01       	movw	r30, r24
     570:	20 83       	st	Z, r18
	TCC0.CTRLB = 0x00;														// Mode = Normal. No CompareEnable
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	98 e0       	ldi	r25, 0x08	; 8
     576:	fc 01       	movw	r30, r24
     578:	11 82       	std	Z+1, r1	; 0x01
	TCC0.INTCTRLA = 0x02;													// Overflow Interrupt Level: Medium
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	98 e0       	ldi	r25, 0x08	; 8
     57e:	22 e0       	ldi	r18, 0x02	; 2
     580:	fc 01       	movw	r30, r24
     582:	26 83       	std	Z+6, r18	; 0x06
	TCC0.PER = 500;
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	98 e0       	ldi	r25, 0x08	; 8
     588:	24 ef       	ldi	r18, 0xF4	; 244
     58a:	31 e0       	ldi	r19, 0x01	; 1
     58c:	fc 01       	movw	r30, r24
     58e:	26 a3       	std	Z+38, r18	; 0x26
     590:	37 a3       	std	Z+39, r19	; 0x27
}
     592:	00 00       	nop
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <initGPIO>:
void initGPIO() {
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
	
}
     5a2:	00 00       	nop
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <initInterrupt>:
void initInterrupt() {
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
	PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
     5b2:	80 ea       	ldi	r24, 0xA0	; 160
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	20 ea       	ldi	r18, 0xA0	; 160
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	f9 01       	movw	r30, r18
     5bc:	22 81       	ldd	r18, Z+2	; 0x02
     5be:	27 60       	ori	r18, 0x07	; 7
     5c0:	fc 01       	movw	r30, r24
     5c2:	22 83       	std	Z+2, r18	; 0x02
	sei();
     5c4:	78 94       	sei
}
     5c6:	00 00       	nop
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <initADC>:

void initADC() {
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
	ADCA.CTRLA = 0x01; //Enable ADCA;
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 83       	st	Z, r18
	ADCA.CTRLB = 0x00;
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	fc 01       	movw	r30, r24
     5ea:	11 82       	std	Z+1, r1	; 0x01
	ADCA.REFCTRL = 0x12;
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	92 e0       	ldi	r25, 0x02	; 2
     5f0:	22 e1       	ldi	r18, 0x12	; 18
     5f2:	fc 01       	movw	r30, r24
     5f4:	22 83       	std	Z+2, r18	; 0x02
	ADCA.PRESCALER = 0x03;
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	23 e0       	ldi	r18, 0x03	; 3
     5fc:	fc 01       	movw	r30, r24
     5fe:	24 83       	std	Z+4, r18	; 0x04
	ADCA.CH0.CTRL = 0x01; //Startbit at MSB
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	92 e0       	ldi	r25, 0x02	; 2
     604:	21 e0       	ldi	r18, 0x01	; 1
     606:	fc 01       	movw	r30, r24
     608:	20 a3       	std	Z+32, r18	; 0x20
	ADCA.CH0.MUXCTRL = (8 << 3) | (7 << 0);
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	27 e4       	ldi	r18, 0x47	; 71
     610:	fc 01       	movw	r30, r24
     612:	21 a3       	std	Z+33, r18	; 0x21
	ADCA.CH0.INTCTRL = 0x01;
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	21 e0       	ldi	r18, 0x01	; 1
     61a:	fc 01       	movw	r30, r24
     61c:	22 a3       	std	Z+34, r18	; 0x22
	ADCA.CH1.CTRL = 0x01; //Startbit at MSB
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	21 e0       	ldi	r18, 0x01	; 1
     624:	fc 01       	movw	r30, r24
     626:	20 a7       	std	Z+40, r18	; 0x28
	ADCA.CH1.MUXCTRL = (9 << 3) | (5 << 0);
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	2d e4       	ldi	r18, 0x4D	; 77
     62e:	fc 01       	movw	r30, r24
     630:	21 a7       	std	Z+41, r18	; 0x29
	ADCA.CH1.INTCTRL = 0x01;
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	92 e0       	ldi	r25, 0x02	; 2
     636:	21 e0       	ldi	r18, 0x01	; 1
     638:	fc 01       	movw	r30, r24
     63a:	22 a7       	std	Z+42, r18	; 0x2a
	
	//Load Calibration-Data from Factory-Signature Memory
	ADCB.CALL = read_calibration_byte(0x24);
     63c:	00 e4       	ldi	r16, 0x40	; 64
     63e:	12 e0       	ldi	r17, 0x02	; 2
     640:	84 e2       	ldi	r24, 0x24	; 36
     642:	0e 94 8c 02 	call	0x518	; 0x518 <read_calibration_byte>
     646:	f8 01       	movw	r30, r16
     648:	84 87       	std	Z+12, r24	; 0x0c
	ADCB.CALH = read_calibration_byte(0x25);
     64a:	00 e4       	ldi	r16, 0x40	; 64
     64c:	12 e0       	ldi	r17, 0x02	; 2
     64e:	85 e2       	ldi	r24, 0x25	; 37
     650:	0e 94 8c 02 	call	0x518	; 0x518 <read_calibration_byte>
     654:	f8 01       	movw	r30, r16
     656:	85 87       	std	Z+13, r24	; 0x0d
	calibrationValue = read_calibration_byte(0x2E);
     658:	8e e2       	ldi	r24, 0x2E	; 46
     65a:	0e 94 8c 02 	call	0x518	; 0x518 <read_calibration_byte>
     65e:	88 2f       	mov	r24, r24
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	80 93 35 20 	sts	0x2035, r24	; 0x802035 <calibrationValue>
     666:	90 93 36 20 	sts	0x2036, r25	; 0x802036 <calibrationValue+0x1>
	calibrationValue += (read_calibration_byte(0x2F)<<8);
     66a:	8f e2       	ldi	r24, 0x2F	; 47
     66c:	0e 94 8c 02 	call	0x518	; 0x518 <read_calibration_byte>
     670:	88 2f       	mov	r24, r24
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	98 2f       	mov	r25, r24
     676:	88 27       	eor	r24, r24
     678:	9c 01       	movw	r18, r24
     67a:	80 91 35 20 	lds	r24, 0x2035	; 0x802035 <calibrationValue>
     67e:	90 91 36 20 	lds	r25, 0x2036	; 0x802036 <calibrationValue+0x1>
     682:	82 0f       	add	r24, r18
     684:	93 1f       	adc	r25, r19
     686:	80 93 35 20 	sts	0x2035, r24	; 0x802035 <calibrationValue>
     68a:	90 93 36 20 	sts	0x2036, r25	; 0x802036 <calibrationValue+0x1>

	ADCB.CTRLA = 0x01; //Enable ADC0;
     68e:	80 e4       	ldi	r24, 0x40	; 64
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	21 e0       	ldi	r18, 0x01	; 1
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18
	ADCB.CTRLB = 0x00;
     698:	80 e4       	ldi	r24, 0x40	; 64
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	fc 01       	movw	r30, r24
     69e:	11 82       	std	Z+1, r1	; 0x01
	ADCB.REFCTRL = 0x03; //Enable Internal 1V Reference and Temperature-Sensor
     6a0:	80 e4       	ldi	r24, 0x40	; 64
     6a2:	92 e0       	ldi	r25, 0x02	; 2
     6a4:	23 e0       	ldi	r18, 0x03	; 3
     6a6:	fc 01       	movw	r30, r24
     6a8:	22 83       	std	Z+2, r18	; 0x02
	ADCB.PRESCALER = 0x03;
     6aa:	80 e4       	ldi	r24, 0x40	; 64
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	23 e0       	ldi	r18, 0x03	; 3
     6b0:	fc 01       	movw	r30, r24
     6b2:	24 83       	std	Z+4, r18	; 0x04
	ADCB.CH0.CTRL = 0x00; //Inputmode: Internal. For Temperature-Sensor
     6b4:	80 e4       	ldi	r24, 0x40	; 64
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	fc 01       	movw	r30, r24
     6ba:	10 a2       	std	Z+32, r1	; 0x20
	ADCB.CH0.MUXCTRL = (0 << 3) | (5 << 0); //Select Temperature-Sensor as Input
     6bc:	80 e4       	ldi	r24, 0x40	; 64
     6be:	92 e0       	ldi	r25, 0x02	; 2
     6c0:	25 e0       	ldi	r18, 0x05	; 5
     6c2:	fc 01       	movw	r30, r24
     6c4:	21 a3       	std	Z+33, r18	; 0x21
	ADCB.CH0.INTCTRL = 0x01;	
     6c6:	80 e4       	ldi	r24, 0x40	; 64
     6c8:	92 e0       	ldi	r25, 0x02	; 2
     6ca:	21 e0       	ldi	r18, 0x01	; 1
     6cc:	fc 01       	movw	r30, r24
     6ce:	22 a3       	std	Z+34, r18	; 0x22
}
     6d0:	00 00       	nop
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	08 95       	ret

000006dc <main>:

int main(void)
{
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
    clockInit();
     6e4:	0e 94 4d 02 	call	0x49a	; 0x49a <clockInit>
	initButtons();
     6e8:	0e 94 21 01 	call	0x242	; 0x242 <initButtons>
	displayInit();
     6ec:	0e 94 4d 06 	call	0xc9a	; 0xc9a <displayInit>
	initTimer();
     6f0:	0e 94 b0 02 	call	0x560	; 0x560 <initTimer>
	initGPIO();
     6f4:	0e 94 cd 02 	call	0x59a	; 0x59a <initGPIO>
	initADC();
     6f8:	0e 94 e7 02 	call	0x5ce	; 0x5ce <initADC>
	initInterrupt();
     6fc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <initInterrupt>
	while (1) 
    {
    }
     700:	ff cf       	rjmp	.-2      	; 0x700 <main+0x24>

00000702 <__vector_14>:
}

ISR(TCC0_OVF_vect) {
     702:	1f 92       	push	r1
     704:	0f 92       	push	r0
     706:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     70a:	0f 92       	push	r0
     70c:	11 24       	eor	r1, r1
     70e:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     712:	0f 92       	push	r0
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	2f 93       	push	r18
     71e:	3f 93       	push	r19
     720:	4f 93       	push	r20
     722:	5f 93       	push	r21
     724:	6f 93       	push	r22
     726:	7f 93       	push	r23
     728:	8f 93       	push	r24
     72a:	9f 93       	push	r25
     72c:	af 93       	push	r26
     72e:	bf 93       	push	r27
     730:	ef 93       	push	r30
     732:	ff 93       	push	r31
     734:	cf 93       	push	r28
     736:	df 93       	push	r29
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	2c 97       	sbiw	r28, 0x0c	; 12
     73e:	cd bf       	out	0x3d, r28	; 61
     740:	de bf       	out	0x3e, r29	; 62
	updateButtons();
     742:	0e 94 3d 01 	call	0x27a	; 0x27a <updateButtons>
	displayBufferClear();
     746:	0e 94 66 07 	call	0xecc	; 0xecc <displayBufferClear>
	char numberString[8];
	//Print Potentiometer Values
	displayBufferWriteStringAtPos(0,0,"POTI1:");
     74a:	40 e0       	ldi	r20, 0x00	; 0
     74c:	50 e2       	ldi	r21, 0x20	; 32
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 03 08 	call	0x1006	; 0x1006 <displayBufferWriteStringAtPos>
	convert_uint_string(adResult0, numberString);
     75a:	80 91 33 20 	lds	r24, 0x2033	; 0x802033 <adResult0>
     75e:	90 91 34 20 	lds	r25, 0x2034	; 0x802034 <adResult0+0x1>
     762:	9e 01       	movw	r18, r28
     764:	2b 5f       	subi	r18, 0xFB	; 251
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	b9 01       	movw	r22, r18
     76a:	0e 94 b0 08 	call	0x1160	; 0x1160 <convert_uint_string>
	displayBufferWriteStringAtPos(0,6, numberString);
     76e:	ce 01       	movw	r24, r28
     770:	05 96       	adiw	r24, 0x05	; 5
     772:	ac 01       	movw	r20, r24
     774:	66 e0       	ldi	r22, 0x06	; 6
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 03 08 	call	0x1006	; 0x1006 <displayBufferWriteStringAtPos>
	displayBufferWriteStringAtPos(1,0,"POTI2:");
     780:	47 e0       	ldi	r20, 0x07	; 7
     782:	50 e2       	ldi	r21, 0x20	; 32
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 03 08 	call	0x1006	; 0x1006 <displayBufferWriteStringAtPos>
	convert_uint_string(adResult1, numberString);
     790:	80 91 37 20 	lds	r24, 0x2037	; 0x802037 <adResult1>
     794:	90 91 38 20 	lds	r25, 0x2038	; 0x802038 <adResult1+0x1>
     798:	9e 01       	movw	r18, r28
     79a:	2b 5f       	subi	r18, 0xFB	; 251
     79c:	3f 4f       	sbci	r19, 0xFF	; 255
     79e:	b9 01       	movw	r22, r18
     7a0:	0e 94 b0 08 	call	0x1160	; 0x1160 <convert_uint_string>
	displayBufferWriteStringAtPos(1,6, numberString);
     7a4:	ce 01       	movw	r24, r28
     7a6:	05 96       	adiw	r24, 0x05	; 5
     7a8:	ac 01       	movw	r20, r24
     7aa:	66 e0       	ldi	r22, 0x06	; 6
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 03 08 	call	0x1006	; 0x1006 <displayBufferWriteStringAtPos>

	//Print RAW Temperature Value
	displayBufferWriteStringAtPos(2,0,"TEMPRaw:");
     7b6:	4e e0       	ldi	r20, 0x0E	; 14
     7b8:	50 e2       	ldi	r21, 0x20	; 32
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 03 08 	call	0x1006	; 0x1006 <displayBufferWriteStringAtPos>
	convert_uint_string(adTempRaw, numberString);
     7c6:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <adTempRaw>
     7ca:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <adTempRaw+0x1>
     7ce:	9e 01       	movw	r18, r28
     7d0:	2b 5f       	subi	r18, 0xFB	; 251
     7d2:	3f 4f       	sbci	r19, 0xFF	; 255
     7d4:	b9 01       	movw	r22, r18
     7d6:	0e 94 b0 08 	call	0x1160	; 0x1160 <convert_uint_string>
	displayBufferWriteStringAtPos(2,8, numberString);
     7da:	ce 01       	movw	r24, r28
     7dc:	05 96       	adiw	r24, 0x05	; 5
     7de:	ac 01       	movw	r20, r24
     7e0:	68 e0       	ldi	r22, 0x08	; 8
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 03 08 	call	0x1006	; 0x1006 <displayBufferWriteStringAtPos>
                           
	//Calculate Temperature from measured ad-value
	float temperature = (float)(((273.15+85) / (float)calibrationValue) * (float)(adTempRaw-190))-(float)(273);
     7ec:	80 91 35 20 	lds	r24, 0x2035	; 0x802035 <calibrationValue>
     7f0:	90 91 36 20 	lds	r25, 0x2036	; 0x802036 <calibrationValue+0x1>
     7f4:	cc 01       	movw	r24, r24
     7f6:	a0 e0       	ldi	r26, 0x00	; 0
     7f8:	b0 e0       	ldi	r27, 0x00	; 0
     7fa:	bc 01       	movw	r22, r24
     7fc:	cd 01       	movw	r24, r26
     7fe:	0e 94 a5 0b 	call	0x174a	; 0x174a <__floatunsisf>
     802:	dc 01       	movw	r26, r24
     804:	cb 01       	movw	r24, r22
     806:	9c 01       	movw	r18, r24
     808:	ad 01       	movw	r20, r26
     80a:	63 e3       	ldi	r22, 0x33	; 51
     80c:	73 e1       	ldi	r23, 0x13	; 19
     80e:	83 eb       	ldi	r24, 0xB3	; 179
     810:	93 e4       	ldi	r25, 0x43	; 67
     812:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__divsf3>
     816:	dc 01       	movw	r26, r24
     818:	cb 01       	movw	r24, r22
     81a:	6c 01       	movw	r12, r24
     81c:	7d 01       	movw	r14, r26
     81e:	80 91 39 20 	lds	r24, 0x2039	; 0x802039 <adTempRaw>
     822:	90 91 3a 20 	lds	r25, 0x203A	; 0x80203a <adTempRaw+0x1>
     826:	8e 5b       	subi	r24, 0xBE	; 190
     828:	91 09       	sbc	r25, r1
     82a:	cc 01       	movw	r24, r24
     82c:	a0 e0       	ldi	r26, 0x00	; 0
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	bc 01       	movw	r22, r24
     832:	cd 01       	movw	r24, r26
     834:	0e 94 a5 0b 	call	0x174a	; 0x174a <__floatunsisf>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	9c 01       	movw	r18, r24
     83e:	ad 01       	movw	r20, r26
     840:	c7 01       	movw	r24, r14
     842:	b6 01       	movw	r22, r12
     844:	0e 94 33 0c 	call	0x1866	; 0x1866 <__mulsf3>
     848:	dc 01       	movw	r26, r24
     84a:	cb 01       	movw	r24, r22
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e8       	ldi	r19, 0x80	; 128
     850:	48 e8       	ldi	r20, 0x88	; 136
     852:	53 e4       	ldi	r21, 0x43	; 67
     854:	bc 01       	movw	r22, r24
     856:	cd 01       	movw	r24, r26
     858:	0e 94 90 0a 	call	0x1520	; 0x1520 <__subsf3>
     85c:	dc 01       	movw	r26, r24
     85e:	cb 01       	movw	r24, r22
     860:	89 83       	std	Y+1, r24	; 0x01
     862:	9a 83       	std	Y+2, r25	; 0x02
     864:	ab 83       	std	Y+3, r26	; 0x03
     866:	bc 83       	std	Y+4, r27	; 0x04

	//Print Temperature
	displayBufferWriteStringAtPos(3,0,"Temperature:");
     868:	47 e1       	ldi	r20, 0x17	; 23
     86a:	50 e2       	ldi	r21, 0x20	; 32
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	83 e0       	ldi	r24, 0x03	; 3
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 03 08 	call	0x1006	; 0x1006 <displayBufferWriteStringAtPos>
	convert_float_string(temperature, numberString, 1);
     878:	ae 01       	movw	r20, r28
     87a:	4b 5f       	subi	r20, 0xFB	; 251
     87c:	5f 4f       	sbci	r21, 0xFF	; 255
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	9a 81       	ldd	r25, Y+2	; 0x02
     882:	ab 81       	ldd	r26, Y+3	; 0x03
     884:	bc 81       	ldd	r27, Y+4	; 0x04
     886:	21 e0       	ldi	r18, 0x01	; 1
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	bc 01       	movw	r22, r24
     88c:	cd 01       	movw	r24, r26
     88e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <convert_float_string>
	displayBufferWriteStringAtPos(3,12, numberString);
     892:	ce 01       	movw	r24, r28
     894:	05 96       	adiw	r24, 0x05	; 5
     896:	ac 01       	movw	r20, r24
     898:	6c e0       	ldi	r22, 0x0C	; 12
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 03 08 	call	0x1006	; 0x1006 <displayBufferWriteStringAtPos>

	displayUpdateWorker();	
     8a4:	0e 94 20 08 	call	0x1040	; 0x1040 <displayUpdateWorker>
	ADCA.CH0.CTRL |= 0x80; //ADC Start Poti1
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	32 e0       	ldi	r19, 0x02	; 2
     8b0:	f9 01       	movw	r30, r18
     8b2:	20 a1       	ldd	r18, Z+32	; 0x20
     8b4:	20 68       	ori	r18, 0x80	; 128
     8b6:	fc 01       	movw	r30, r24
     8b8:	20 a3       	std	Z+32, r18	; 0x20
	ADCA.CH1.CTRL |= 0x80; //ADC Start Poti2
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	92 e0       	ldi	r25, 0x02	; 2
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	32 e0       	ldi	r19, 0x02	; 2
     8c2:	f9 01       	movw	r30, r18
     8c4:	20 a5       	ldd	r18, Z+40	; 0x28
     8c6:	20 68       	ori	r18, 0x80	; 128
     8c8:	fc 01       	movw	r30, r24
     8ca:	20 a7       	std	Z+40, r18	; 0x28
	ADCB.CH0.CTRL |= 0x80; //ADC Start Temp-Sensor
     8cc:	80 e4       	ldi	r24, 0x40	; 64
     8ce:	92 e0       	ldi	r25, 0x02	; 2
     8d0:	20 e4       	ldi	r18, 0x40	; 64
     8d2:	32 e0       	ldi	r19, 0x02	; 2
     8d4:	f9 01       	movw	r30, r18
     8d6:	20 a1       	ldd	r18, Z+32	; 0x20
     8d8:	20 68       	ori	r18, 0x80	; 128
     8da:	fc 01       	movw	r30, r24
     8dc:	20 a3       	std	Z+32, r18	; 0x20
}
     8de:	00 00       	nop
     8e0:	2c 96       	adiw	r28, 0x0c	; 12
     8e2:	cd bf       	out	0x3d, r28	; 61
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	ff 91       	pop	r31
     8ec:	ef 91       	pop	r30
     8ee:	bf 91       	pop	r27
     8f0:	af 91       	pop	r26
     8f2:	9f 91       	pop	r25
     8f4:	8f 91       	pop	r24
     8f6:	7f 91       	pop	r23
     8f8:	6f 91       	pop	r22
     8fa:	5f 91       	pop	r21
     8fc:	4f 91       	pop	r20
     8fe:	3f 91       	pop	r19
     900:	2f 91       	pop	r18
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	0f 90       	pop	r0
     90c:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     910:	0f 90       	pop	r0
     912:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     916:	0f 90       	pop	r0
     918:	1f 90       	pop	r1
     91a:	18 95       	reti

0000091c <__vector_71>:

ISR(ADCA_CH0_vect) {
     91c:	1f 92       	push	r1
     91e:	0f 92       	push	r0
     920:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     924:	0f 92       	push	r0
     926:	11 24       	eor	r1, r1
     928:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     92c:	0f 92       	push	r0
     92e:	8f 93       	push	r24
     930:	9f 93       	push	r25
     932:	ef 93       	push	r30
     934:	ff 93       	push	r31
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
	adResult0 = ADCA.CH0.RES;
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	92 e0       	ldi	r25, 0x02	; 2
     942:	fc 01       	movw	r30, r24
     944:	84 a1       	ldd	r24, Z+36	; 0x24
     946:	95 a1       	ldd	r25, Z+37	; 0x25
     948:	80 93 33 20 	sts	0x2033, r24	; 0x802033 <adResult0>
     94c:	90 93 34 20 	sts	0x2034, r25	; 0x802034 <adResult0+0x1>
}
     950:	00 00       	nop
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	ff 91       	pop	r31
     958:	ef 91       	pop	r30
     95a:	9f 91       	pop	r25
     95c:	8f 91       	pop	r24
     95e:	0f 90       	pop	r0
     960:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     964:	0f 90       	pop	r0
     966:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     96a:	0f 90       	pop	r0
     96c:	1f 90       	pop	r1
     96e:	18 95       	reti

00000970 <__vector_72>:
ISR(ADCA_CH1_vect) {
     970:	1f 92       	push	r1
     972:	0f 92       	push	r0
     974:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     978:	0f 92       	push	r0
     97a:	11 24       	eor	r1, r1
     97c:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     980:	0f 92       	push	r0
     982:	8f 93       	push	r24
     984:	9f 93       	push	r25
     986:	ef 93       	push	r30
     988:	ff 93       	push	r31
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
	adResult1 = ADCA.CH1.RES;
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	92 e0       	ldi	r25, 0x02	; 2
     996:	fc 01       	movw	r30, r24
     998:	84 a5       	ldd	r24, Z+44	; 0x2c
     99a:	95 a5       	ldd	r25, Z+45	; 0x2d
     99c:	80 93 37 20 	sts	0x2037, r24	; 0x802037 <adResult1>
     9a0:	90 93 38 20 	sts	0x2038, r25	; 0x802038 <adResult1+0x1>
}
     9a4:	00 00       	nop
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	ff 91       	pop	r31
     9ac:	ef 91       	pop	r30
     9ae:	9f 91       	pop	r25
     9b0:	8f 91       	pop	r24
     9b2:	0f 90       	pop	r0
     9b4:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     9b8:	0f 90       	pop	r0
     9ba:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     9be:	0f 90       	pop	r0
     9c0:	1f 90       	pop	r1
     9c2:	18 95       	reti

000009c4 <__vector_39>:
ISR(ADCB_CH0_vect) {
     9c4:	1f 92       	push	r1
     9c6:	0f 92       	push	r0
     9c8:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     9cc:	0f 92       	push	r0
     9ce:	11 24       	eor	r1, r1
     9d0:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     9d4:	0f 92       	push	r0
     9d6:	8f 93       	push	r24
     9d8:	9f 93       	push	r25
     9da:	ef 93       	push	r30
     9dc:	ff 93       	push	r31
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
	adTempRaw = ADCB.CH0.RES;
     9e6:	80 e4       	ldi	r24, 0x40	; 64
     9e8:	92 e0       	ldi	r25, 0x02	; 2
     9ea:	fc 01       	movw	r30, r24
     9ec:	84 a1       	ldd	r24, Z+36	; 0x24
     9ee:	95 a1       	ldd	r25, Z+37	; 0x25
     9f0:	80 93 39 20 	sts	0x2039, r24	; 0x802039 <adTempRaw>
     9f4:	90 93 3a 20 	sts	0x203A, r25	; 0x80203a <adTempRaw+0x1>
}
     9f8:	00 00       	nop
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	ff 91       	pop	r31
     a00:	ef 91       	pop	r30
     a02:	9f 91       	pop	r25
     a04:	8f 91       	pop	r24
     a06:	0f 90       	pop	r0
     a08:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
     a0c:	0f 90       	pop	r0
     a0e:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
     a12:	0f 90       	pop	r0
     a14:	1f 90       	pop	r1
     a16:	18 95       	reti

00000a18 <delayUS>:

void displayForceUpdateBuffer(void) {
	for(int i = 0; i < 4; i++) {
		displayWriteStringAtPos(i,0,&displayBuffer[i][0]);
	}
}
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62
     a20:	2a 97       	sbiw	r28, 0x0a	; 10
     a22:	cd bf       	out	0x3d, r28	; 61
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	6f 83       	std	Y+7, r22	; 0x07
     a28:	78 87       	std	Y+8, r23	; 0x08
     a2a:	89 87       	std	Y+9, r24	; 0x09
     a2c:	9a 87       	std	Y+10, r25	; 0x0a
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	8b 83       	std	Y+3, r24	; 0x03
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	ad 83       	std	Y+5, r26	; 0x05
     a3c:	be 83       	std	Y+6, r27	; 0x06
     a3e:	2b 81       	ldd	r18, Y+3	; 0x03
     a40:	3c 81       	ldd	r19, Y+4	; 0x04
     a42:	4d 81       	ldd	r20, Y+5	; 0x05
     a44:	5e 81       	ldd	r21, Y+6	; 0x06
     a46:	8f 81       	ldd	r24, Y+7	; 0x07
     a48:	98 85       	ldd	r25, Y+8	; 0x08
     a4a:	a9 85       	ldd	r26, Y+9	; 0x09
     a4c:	ba 85       	ldd	r27, Y+10	; 0x0a
     a4e:	bc 01       	movw	r22, r24
     a50:	cd 01       	movw	r24, r26
     a52:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__mulsi3>
     a56:	dc 01       	movw	r26, r24
     a58:	cb 01       	movw	r24, r22
     a5a:	8b 83       	std	Y+3, r24	; 0x03
     a5c:	9c 83       	std	Y+4, r25	; 0x04
     a5e:	ad 83       	std	Y+5, r26	; 0x05
     a60:	be 83       	std	Y+6, r27	; 0x06
     a62:	8b 81       	ldd	r24, Y+3	; 0x03
     a64:	9c 81       	ldd	r25, Y+4	; 0x04
     a66:	ad 81       	ldd	r26, Y+5	; 0x05
     a68:	be 81       	ldd	r27, Y+6	; 0x06
     a6a:	02 97       	sbiw	r24, 0x02	; 2
     a6c:	a1 05       	cpc	r26, r1
     a6e:	b1 05       	cpc	r27, r1
     a70:	c8 f0       	brcs	.+50     	; 0xaa4 <delayUS+0x8c>
     a72:	19 82       	std	Y+1, r1	; 0x01
     a74:	1a 82       	std	Y+2, r1	; 0x02
     a76:	06 c0       	rjmp	.+12     	; 0xa84 <delayUS+0x6c>
     a78:	00 00       	nop
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	9a 81       	ldd	r25, Y+2	; 0x02
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	89 83       	std	Y+1, r24	; 0x01
     a82:	9a 83       	std	Y+2, r25	; 0x02
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	9a 81       	ldd	r25, Y+2	; 0x02
     a88:	9c 01       	movw	r18, r24
     a8a:	99 0f       	add	r25, r25
     a8c:	44 0b       	sbc	r20, r20
     a8e:	55 0b       	sbc	r21, r21
     a90:	8b 81       	ldd	r24, Y+3	; 0x03
     a92:	9c 81       	ldd	r25, Y+4	; 0x04
     a94:	ad 81       	ldd	r26, Y+5	; 0x05
     a96:	be 81       	ldd	r27, Y+6	; 0x06
     a98:	28 17       	cp	r18, r24
     a9a:	39 07       	cpc	r19, r25
     a9c:	4a 07       	cpc	r20, r26
     a9e:	5b 07       	cpc	r21, r27
     aa0:	58 f3       	brcs	.-42     	; 0xa78 <delayUS+0x60>
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <delayUS+0x8e>
     aa4:	00 00       	nop
     aa6:	00 00       	nop
     aa8:	2a 96       	adiw	r28, 0x0a	; 10
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	de bf       	out	0x3e, r29	; 62
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	08 95       	ret

00000ab4 <setPort>:
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	1f 92       	push	r1
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	89 83       	std	Y+1, r24	; 0x01
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	8f 70       	andi	r24, 0x0F	; 15
     ac4:	89 83       	std	Y+1, r24	; 0x01
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	82 95       	swap	r24
     aca:	80 7f       	andi	r24, 0xF0	; 240
     acc:	89 83       	std	Y+1, r24	; 0x01
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	96 e0       	ldi	r25, 0x06	; 6
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	36 e0       	ldi	r19, 0x06	; 6
     ad6:	f9 01       	movw	r30, r18
     ad8:	34 81       	ldd	r19, Z+4	; 0x04
     ada:	29 81       	ldd	r18, Y+1	; 0x01
     adc:	2f 60       	ori	r18, 0x0F	; 15
     ade:	23 23       	and	r18, r19
     ae0:	fc 01       	movw	r30, r24
     ae2:	24 83       	std	Z+4, r18	; 0x04
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	96 e0       	ldi	r25, 0x06	; 6
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	36 e0       	ldi	r19, 0x06	; 6
     aec:	f9 01       	movw	r30, r18
     aee:	34 81       	ldd	r19, Z+4	; 0x04
     af0:	29 81       	ldd	r18, Y+1	; 0x01
     af2:	23 2b       	or	r18, r19
     af4:	fc 01       	movw	r30, r24
     af6:	24 83       	std	Z+4, r18	; 0x04
     af8:	00 00       	nop
     afa:	0f 90       	pop	r0
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	08 95       	ret

00000b02 <setRS>:
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	1f 92       	push	r1
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
     b0c:	89 83       	std	Y+1, r24	; 0x01
     b0e:	89 81       	ldd	r24, Y+1	; 0x01
     b10:	88 23       	and	r24, r24
     b12:	31 f0       	breq	.+12     	; 0xb20 <setRS+0x1e>
     b14:	80 e6       	ldi	r24, 0x60	; 96
     b16:	96 e0       	ldi	r25, 0x06	; 6
     b18:	21 e0       	ldi	r18, 0x01	; 1
     b1a:	fc 01       	movw	r30, r24
     b1c:	25 83       	std	Z+5, r18	; 0x05
     b1e:	05 c0       	rjmp	.+10     	; 0xb2a <setRS+0x28>
     b20:	80 e6       	ldi	r24, 0x60	; 96
     b22:	96 e0       	ldi	r25, 0x06	; 6
     b24:	21 e0       	ldi	r18, 0x01	; 1
     b26:	fc 01       	movw	r30, r24
     b28:	26 83       	std	Z+6, r18	; 0x06
     b2a:	00 00       	nop
     b2c:	0f 90       	pop	r0
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <setRW>:
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	1f 92       	push	r1
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	89 83       	std	Y+1, r24	; 0x01
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	88 23       	and	r24, r24
     b44:	31 f0       	breq	.+12     	; 0xb52 <setRW+0x1e>
     b46:	80 e6       	ldi	r24, 0x60	; 96
     b48:	96 e0       	ldi	r25, 0x06	; 6
     b4a:	22 e0       	ldi	r18, 0x02	; 2
     b4c:	fc 01       	movw	r30, r24
     b4e:	25 83       	std	Z+5, r18	; 0x05
     b50:	05 c0       	rjmp	.+10     	; 0xb5c <setRW+0x28>
     b52:	80 e6       	ldi	r24, 0x60	; 96
     b54:	96 e0       	ldi	r25, 0x06	; 6
     b56:	22 e0       	ldi	r18, 0x02	; 2
     b58:	fc 01       	movw	r30, r24
     b5a:	26 83       	std	Z+6, r18	; 0x06
     b5c:	00 00       	nop
     b5e:	0f 90       	pop	r0
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <setE>:
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	1f 92       	push	r1
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	89 83       	std	Y+1, r24	; 0x01
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	88 23       	and	r24, r24
     b76:	31 f0       	breq	.+12     	; 0xb84 <setE+0x1e>
     b78:	80 e6       	ldi	r24, 0x60	; 96
     b7a:	96 e0       	ldi	r25, 0x06	; 6
     b7c:	24 e0       	ldi	r18, 0x04	; 4
     b7e:	fc 01       	movw	r30, r24
     b80:	25 83       	std	Z+5, r18	; 0x05
     b82:	05 c0       	rjmp	.+10     	; 0xb8e <setE+0x28>
     b84:	80 e6       	ldi	r24, 0x60	; 96
     b86:	96 e0       	ldi	r25, 0x06	; 6
     b88:	24 e0       	ldi	r18, 0x04	; 4
     b8a:	fc 01       	movw	r30, r24
     b8c:	26 83       	std	Z+6, r18	; 0x06
     b8e:	00 00       	nop
     b90:	0f 90       	pop	r0
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	08 95       	ret

00000b98 <Nybble>:
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	0e 94 b3 05 	call	0xb66	; 0xb66 <setE>
     ba6:	61 e0       	ldi	r22, 0x01	; 1
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 0c 05 	call	0xa18	; 0xa18 <delayUS>
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	0e 94 b3 05 	call	0xb66	; 0xb66 <setE>
     bb8:	00 00       	nop
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	08 95       	ret

00000bc0 <command>:
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	1f 92       	push	r1
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	89 83       	std	Y+1, r24	; 0x01
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	82 95       	swap	r24
     bd0:	8f 70       	andi	r24, 0x0F	; 15
     bd2:	0e 94 5a 05 	call	0xab4	; 0xab4 <setPort>
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	0e 94 81 05 	call	0xb02	; 0xb02 <setRS>
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	0e 94 9a 05 	call	0xb34	; 0xb34 <setRW>
     be2:	0e 94 cc 05 	call	0xb98	; 0xb98 <Nybble>
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	8f 70       	andi	r24, 0x0F	; 15
     bea:	0e 94 5a 05 	call	0xab4	; 0xab4 <setPort>
     bee:	0e 94 cc 05 	call	0xb98	; 0xb98 <Nybble>
     bf2:	00 00       	nop
     bf4:	0f 90       	pop	r0
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <write>:
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	1f 92       	push	r1
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	82 95       	swap	r24
     c0c:	8f 70       	andi	r24, 0x0F	; 15
     c0e:	0e 94 5a 05 	call	0xab4	; 0xab4 <setPort>
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	0e 94 81 05 	call	0xb02	; 0xb02 <setRS>
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	0e 94 9a 05 	call	0xb34	; 0xb34 <setRW>
     c1e:	0e 94 cc 05 	call	0xb98	; 0xb98 <Nybble>
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	8f 70       	andi	r24, 0x0F	; 15
     c26:	0e 94 5a 05 	call	0xab4	; 0xab4 <setPort>
     c2a:	0e 94 cc 05 	call	0xb98	; 0xb98 <Nybble>
     c2e:	00 00       	nop
     c30:	0f 90       	pop	r0
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <initDisplayTimer>:
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	1f 92       	push	r1
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	89 83       	std	Y+1, r24	; 0x01
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	9b e0       	ldi	r25, 0x0B	; 11
     c4c:	25 e0       	ldi	r18, 0x05	; 5
     c4e:	fc 01       	movw	r30, r24
     c50:	20 83       	st	Z, r18
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	9b e0       	ldi	r25, 0x0B	; 11
     c56:	fc 01       	movw	r30, r24
     c58:	11 82       	std	Z+1, r1	; 0x01
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	9b e0       	ldi	r25, 0x0B	; 11
     c5e:	22 e0       	ldi	r18, 0x02	; 2
     c60:	fc 01       	movw	r30, r24
     c62:	26 83       	std	Z+6, r18	; 0x06
     c64:	00 e0       	ldi	r16, 0x00	; 0
     c66:	1b e0       	ldi	r17, 0x0B	; 11
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	80 e2       	ldi	r24, 0x20	; 32
     c74:	91 ea       	ldi	r25, 0xA1	; 161
     c76:	a7 e0       	ldi	r26, 0x07	; 7
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	bc 01       	movw	r22, r24
     c7c:	cd 01       	movw	r24, r26
     c7e:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__divmodsi4>
     c82:	da 01       	movw	r26, r20
     c84:	c9 01       	movw	r24, r18
     c86:	f8 01       	movw	r30, r16
     c88:	86 a3       	std	Z+38, r24	; 0x26
     c8a:	97 a3       	std	Z+39, r25	; 0x27
     c8c:	00 00       	nop
     c8e:	0f 90       	pop	r0
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	08 95       	ret

00000c9a <displayInit>:
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	96 e0       	ldi	r25, 0x06	; 6
     ca6:	20 e1       	ldi	r18, 0x10	; 16
     ca8:	fc 01       	movw	r30, r24
     caa:	21 83       	std	Z+1, r18	; 0x01
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	96 e0       	ldi	r25, 0x06	; 6
     cb0:	20 e2       	ldi	r18, 0x20	; 32
     cb2:	fc 01       	movw	r30, r24
     cb4:	21 83       	std	Z+1, r18	; 0x01
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	96 e0       	ldi	r25, 0x06	; 6
     cba:	20 e4       	ldi	r18, 0x40	; 64
     cbc:	fc 01       	movw	r30, r24
     cbe:	21 83       	std	Z+1, r18	; 0x01
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	96 e0       	ldi	r25, 0x06	; 6
     cc4:	20 e8       	ldi	r18, 0x80	; 128
     cc6:	fc 01       	movw	r30, r24
     cc8:	21 83       	std	Z+1, r18	; 0x01
     cca:	80 e6       	ldi	r24, 0x60	; 96
     ccc:	96 e0       	ldi	r25, 0x06	; 6
     cce:	21 e0       	ldi	r18, 0x01	; 1
     cd0:	fc 01       	movw	r30, r24
     cd2:	21 83       	std	Z+1, r18	; 0x01
     cd4:	80 e6       	ldi	r24, 0x60	; 96
     cd6:	96 e0       	ldi	r25, 0x06	; 6
     cd8:	22 e0       	ldi	r18, 0x02	; 2
     cda:	fc 01       	movw	r30, r24
     cdc:	21 83       	std	Z+1, r18	; 0x01
     cde:	80 e6       	ldi	r24, 0x60	; 96
     ce0:	96 e0       	ldi	r25, 0x06	; 6
     ce2:	24 e0       	ldi	r18, 0x04	; 4
     ce4:	fc 01       	movw	r30, r24
     ce6:	21 83       	std	Z+1, r18	; 0x01
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	96 e0       	ldi	r25, 0x06	; 6
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	36 e0       	ldi	r19, 0x06	; 6
     cf0:	f9 01       	movw	r30, r18
     cf2:	24 81       	ldd	r18, Z+4	; 0x04
     cf4:	2f 70       	andi	r18, 0x0F	; 15
     cf6:	fc 01       	movw	r30, r24
     cf8:	24 83       	std	Z+4, r18	; 0x04
     cfa:	80 e6       	ldi	r24, 0x60	; 96
     cfc:	96 e0       	ldi	r25, 0x06	; 6
     cfe:	20 e6       	ldi	r18, 0x60	; 96
     d00:	36 e0       	ldi	r19, 0x06	; 6
     d02:	f9 01       	movw	r30, r18
     d04:	24 81       	ldd	r18, Z+4	; 0x04
     d06:	28 7f       	andi	r18, 0xF8	; 248
     d08:	fc 01       	movw	r30, r24
     d0a:	24 83       	std	Z+4, r18	; 0x04
     d0c:	60 e4       	ldi	r22, 0x40	; 64
     d0e:	7c e9       	ldi	r23, 0x9C	; 156
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 0c 05 	call	0xa18	; 0xa18 <delayUS>
     d18:	83 e0       	ldi	r24, 0x03	; 3
     d1a:	0e 94 5a 05 	call	0xab4	; 0xab4 <setPort>
     d1e:	68 e8       	ldi	r22, 0x88	; 136
     d20:	73 e1       	ldi	r23, 0x13	; 19
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 94 0c 05 	call	0xa18	; 0xa18 <delayUS>
     d2a:	0e 94 cc 05 	call	0xb98	; 0xb98 <Nybble>
     d2e:	60 ea       	ldi	r22, 0xA0	; 160
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 0c 05 	call	0xa18	; 0xa18 <delayUS>
     d3a:	0e 94 cc 05 	call	0xb98	; 0xb98 <Nybble>
     d3e:	60 ea       	ldi	r22, 0xA0	; 160
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 0c 05 	call	0xa18	; 0xa18 <delayUS>
     d4a:	0e 94 cc 05 	call	0xb98	; 0xb98 <Nybble>
     d4e:	60 ea       	ldi	r22, 0xA0	; 160
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 0c 05 	call	0xa18	; 0xa18 <delayUS>
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	0e 94 5a 05 	call	0xab4	; 0xab4 <setPort>
     d60:	0e 94 cc 05 	call	0xb98	; 0xb98 <Nybble>
     d64:	88 e2       	ldi	r24, 0x28	; 40
     d66:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <command>
     d6a:	80 e1       	ldi	r24, 0x10	; 16
     d6c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <command>
     d70:	8c e0       	ldi	r24, 0x0C	; 12
     d72:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <command>
     d76:	86 e0       	ldi	r24, 0x06	; 6
     d78:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <command>
     d7c:	0e 94 66 07 	call	0xecc	; 0xecc <displayBufferClear>
     d80:	8a e0       	ldi	r24, 0x0A	; 10
     d82:	0e 94 1c 06 	call	0xc38	; 0xc38 <initDisplayTimer>
     d86:	00 00       	nop
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	08 95       	ret

00000d8e <displaySetPos>:
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	00 d0       	rcall	.+0      	; 0xd94 <displaySetPos+0x6>
     d94:	1f 92       	push	r1
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	89 83       	std	Y+1, r24	; 0x01
     d9c:	9a 83       	std	Y+2, r25	; 0x02
     d9e:	6b 83       	std	Y+3, r22	; 0x03
     da0:	7c 83       	std	Y+4, r23	; 0x04
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	91 05       	cpc	r25, r1
     daa:	89 f0       	breq	.+34     	; 0xdce <displaySetPos+0x40>
     dac:	82 30       	cpi	r24, 0x02	; 2
     dae:	91 05       	cpc	r25, r1
     db0:	1c f4       	brge	.+6      	; 0xdb8 <displaySetPos+0x2a>
     db2:	89 2b       	or	r24, r25
     db4:	39 f0       	breq	.+14     	; 0xdc4 <displaySetPos+0x36>
     db6:	1a c0       	rjmp	.+52     	; 0xdec <displaySetPos+0x5e>
     db8:	82 30       	cpi	r24, 0x02	; 2
     dba:	91 05       	cpc	r25, r1
     dbc:	69 f0       	breq	.+26     	; 0xdd8 <displaySetPos+0x4a>
     dbe:	03 97       	sbiw	r24, 0x03	; 3
     dc0:	81 f0       	breq	.+32     	; 0xde2 <displaySetPos+0x54>
     dc2:	14 c0       	rjmp	.+40     	; 0xdec <displaySetPos+0x5e>
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	80 58       	subi	r24, 0x80	; 128
     dc8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <command>
     dcc:	0f c0       	rjmp	.+30     	; 0xdec <displaySetPos+0x5e>
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	80 54       	subi	r24, 0x40	; 64
     dd2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <command>
     dd6:	0a c0       	rjmp	.+20     	; 0xdec <displaySetPos+0x5e>
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	8c 56       	subi	r24, 0x6C	; 108
     ddc:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <command>
     de0:	05 c0       	rjmp	.+10     	; 0xdec <displaySetPos+0x5e>
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	8c 52       	subi	r24, 0x2C	; 44
     de6:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <command>
     dea:	00 00       	nop
     dec:	67 e2       	ldi	r22, 0x27	; 39
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 0c 05 	call	0xa18	; 0xa18 <delayUS>
     df8:	00 00       	nop
     dfa:	24 96       	adiw	r28, 0x04	; 4
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <displayWriteChar>:
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	1f 92       	push	r1
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	0e 94 fe 05 	call	0xbfc	; 0xbfc <write>
     e18:	6b e2       	ldi	r22, 0x2B	; 43
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 0c 05 	call	0xa18	; 0xa18 <delayUS>
     e24:	00 00       	nop
     e26:	0f 90       	pop	r0
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <displayWriteString>:
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	00 d0       	rcall	.+0      	; 0xe34 <displayWriteString+0x6>
     e34:	1f 92       	push	r1
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	8b 83       	std	Y+3, r24	; 0x03
     e3c:	9c 83       	std	Y+4, r25	; 0x04
     e3e:	19 82       	std	Y+1, r1	; 0x01
     e40:	1a 82       	std	Y+2, r1	; 0x02
     e42:	19 c0       	rjmp	.+50     	; 0xe76 <displayWriteString+0x48>
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	2b 81       	ldd	r18, Y+3	; 0x03
     e4a:	3c 81       	ldd	r19, Y+4	; 0x04
     e4c:	82 0f       	add	r24, r18
     e4e:	93 1f       	adc	r25, r19
     e50:	fc 01       	movw	r30, r24
     e52:	80 81       	ld	r24, Z
     e54:	88 23       	and	r24, r24
     e56:	a1 f0       	breq	.+40     	; 0xe80 <displayWriteString+0x52>
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	9a 81       	ldd	r25, Y+2	; 0x02
     e5c:	2b 81       	ldd	r18, Y+3	; 0x03
     e5e:	3c 81       	ldd	r19, Y+4	; 0x04
     e60:	82 0f       	add	r24, r18
     e62:	93 1f       	adc	r25, r19
     e64:	fc 01       	movw	r30, r24
     e66:	80 81       	ld	r24, Z
     e68:	0e 94 03 07 	call	0xe06	; 0xe06 <displayWriteChar>
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	9a 81       	ldd	r25, Y+2	; 0x02
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	44 97       	sbiw	r24, 0x14	; 20
     e7c:	1c f3       	brlt	.-58     	; 0xe44 <displayWriteString+0x16>
     e7e:	01 c0       	rjmp	.+2      	; 0xe82 <displayWriteString+0x54>
     e80:	00 00       	nop
     e82:	00 00       	nop
     e84:	24 96       	adiw	r28, 0x04	; 4
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	08 95       	ret

00000e90 <displayWriteStringAtPos>:
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	00 d0       	rcall	.+0      	; 0xe96 <displayWriteStringAtPos+0x6>
     e96:	00 d0       	rcall	.+0      	; 0xe98 <displayWriteStringAtPos+0x8>
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	6b 83       	std	Y+3, r22	; 0x03
     ea2:	7c 83       	std	Y+4, r23	; 0x04
     ea4:	4d 83       	std	Y+5, r20	; 0x05
     ea6:	5e 83       	std	Y+6, r21	; 0x06
     ea8:	2b 81       	ldd	r18, Y+3	; 0x03
     eaa:	3c 81       	ldd	r19, Y+4	; 0x04
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	b9 01       	movw	r22, r18
     eb2:	0e 94 c7 06 	call	0xd8e	; 0xd8e <displaySetPos>
     eb6:	8d 81       	ldd	r24, Y+5	; 0x05
     eb8:	9e 81       	ldd	r25, Y+6	; 0x06
     eba:	0e 94 17 07 	call	0xe2e	; 0xe2e <displayWriteString>
     ebe:	00 00       	nop
     ec0:	26 96       	adiw	r28, 0x06	; 6
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	08 95       	ret

00000ecc <displayBufferClear>:
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <displayBufferClear+0x6>
     ed2:	1f 92       	push	r1
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	19 82       	std	Y+1, r1	; 0x01
     eda:	1a 82       	std	Y+2, r1	; 0x02
     edc:	22 c0       	rjmp	.+68     	; 0xf22 <displayBufferClear+0x56>
     ede:	1b 82       	std	Y+3, r1	; 0x03
     ee0:	1c 82       	std	Y+4, r1	; 0x04
     ee2:	16 c0       	rjmp	.+44     	; 0xf10 <displayBufferClear+0x44>
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	9a 81       	ldd	r25, Y+2	; 0x02
     ee8:	44 e1       	ldi	r20, 0x14	; 20
     eea:	48 9f       	mul	r20, r24
     eec:	90 01       	movw	r18, r0
     eee:	49 9f       	mul	r20, r25
     ef0:	30 0d       	add	r19, r0
     ef2:	11 24       	eor	r1, r1
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	9c 81       	ldd	r25, Y+4	; 0x04
     ef8:	82 0f       	add	r24, r18
     efa:	93 1f       	adc	r25, r19
     efc:	85 5c       	subi	r24, 0xC5	; 197
     efe:	9f 4d       	sbci	r25, 0xDF	; 223
     f00:	20 e2       	ldi	r18, 0x20	; 32
     f02:	fc 01       	movw	r30, r24
     f04:	20 83       	st	Z, r18
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	8b 83       	std	Y+3, r24	; 0x03
     f0e:	9c 83       	std	Y+4, r25	; 0x04
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	44 97       	sbiw	r24, 0x14	; 20
     f16:	34 f3       	brlt	.-52     	; 0xee4 <displayBufferClear+0x18>
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	9a 81       	ldd	r25, Y+2	; 0x02
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	9a 81       	ldd	r25, Y+2	; 0x02
     f26:	04 97       	sbiw	r24, 0x04	; 4
     f28:	d4 f2       	brlt	.-76     	; 0xede <displayBufferClear+0x12>
     f2a:	00 00       	nop
     f2c:	24 96       	adiw	r28, 0x04	; 4
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <displayBufferWriteChar>:
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	1f 92       	push	r1
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <displayLine>
     f48:	48 2f       	mov	r20, r24
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <displayPos>
     f50:	88 2f       	mov	r24, r24
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	64 e1       	ldi	r22, 0x14	; 20
     f56:	64 9f       	mul	r22, r20
     f58:	90 01       	movw	r18, r0
     f5a:	65 9f       	mul	r22, r21
     f5c:	30 0d       	add	r19, r0
     f5e:	11 24       	eor	r1, r1
     f60:	82 0f       	add	r24, r18
     f62:	93 1f       	adc	r25, r19
     f64:	85 5c       	subi	r24, 0xC5	; 197
     f66:	9f 4d       	sbci	r25, 0xDF	; 223
     f68:	29 81       	ldd	r18, Y+1	; 0x01
     f6a:	fc 01       	movw	r30, r24
     f6c:	20 83       	st	Z, r18
     f6e:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <displayPos>
     f72:	8f 5f       	subi	r24, 0xFF	; 255
     f74:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <displayPos>
     f78:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <displayPos>
     f7c:	84 31       	cpi	r24, 0x14	; 20
     f7e:	38 f0       	brcs	.+14     	; 0xf8e <displayBufferWriteChar+0x56>
     f80:	10 92 2d 20 	sts	0x202D, r1	; 0x80202d <displayPos>
     f84:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <displayLine>
     f88:	8f 5f       	subi	r24, 0xFF	; 255
     f8a:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <displayLine>
     f8e:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <displayLine>
     f92:	84 30       	cpi	r24, 0x04	; 4
     f94:	10 f0       	brcs	.+4      	; 0xf9a <displayBufferWriteChar+0x62>
     f96:	10 92 2c 20 	sts	0x202C, r1	; 0x80202c <displayLine>
     f9a:	00 00       	nop
     f9c:	0f 90       	pop	r0
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	08 95       	ret

00000fa4 <displayBufferWriteString>:
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <displayBufferWriteString+0x6>
     faa:	1f 92       	push	r1
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	8b 83       	std	Y+3, r24	; 0x03
     fb2:	9c 83       	std	Y+4, r25	; 0x04
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	1a 82       	std	Y+2, r1	; 0x02
     fb8:	19 c0       	rjmp	.+50     	; 0xfec <displayBufferWriteString+0x48>
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	2b 81       	ldd	r18, Y+3	; 0x03
     fc0:	3c 81       	ldd	r19, Y+4	; 0x04
     fc2:	82 0f       	add	r24, r18
     fc4:	93 1f       	adc	r25, r19
     fc6:	fc 01       	movw	r30, r24
     fc8:	80 81       	ld	r24, Z
     fca:	88 23       	and	r24, r24
     fcc:	a1 f0       	breq	.+40     	; 0xff6 <displayBufferWriteString+0x52>
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	2b 81       	ldd	r18, Y+3	; 0x03
     fd4:	3c 81       	ldd	r19, Y+4	; 0x04
     fd6:	82 0f       	add	r24, r18
     fd8:	93 1f       	adc	r25, r19
     fda:	fc 01       	movw	r30, r24
     fdc:	80 81       	ld	r24, Z
     fde:	0e 94 9c 07 	call	0xf38	; 0xf38 <displayBufferWriteChar>
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	9a 81       	ldd	r25, Y+2	; 0x02
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	44 97       	sbiw	r24, 0x14	; 20
     ff2:	1c f3       	brlt	.-58     	; 0xfba <displayBufferWriteString+0x16>
     ff4:	01 c0       	rjmp	.+2      	; 0xff8 <displayBufferWriteString+0x54>
     ff6:	00 00       	nop
     ff8:	00 00       	nop
     ffa:	24 96       	adiw	r28, 0x04	; 4
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	08 95       	ret

00001006 <displayBufferWriteStringAtPos>:
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	00 d0       	rcall	.+0      	; 0x100c <displayBufferWriteStringAtPos+0x6>
    100c:	00 d0       	rcall	.+0      	; 0x100e <displayBufferWriteStringAtPos+0x8>
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	6b 83       	std	Y+3, r22	; 0x03
    1018:	7c 83       	std	Y+4, r23	; 0x04
    101a:	4d 83       	std	Y+5, r20	; 0x05
    101c:	5e 83       	std	Y+6, r21	; 0x06
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <displayLine>
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <displayPos>
    102a:	8d 81       	ldd	r24, Y+5	; 0x05
    102c:	9e 81       	ldd	r25, Y+6	; 0x06
    102e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <displayBufferWriteString>
    1032:	00 00       	nop
    1034:	26 96       	adiw	r28, 0x06	; 6
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <displayUpdateWorker>:
uint8_t displayUpdate = 0;
void displayUpdateWorker(void) {
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	1f 92       	push	r1
    1046:	1f 92       	push	r1
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
	if(displayUpdate > 0) {
    104c:	80 91 2e 20 	lds	r24, 0x202E	; 0x80202e <displayUpdate>
    1050:	88 23       	and	r24, r24
    1052:	01 f1       	breq	.+64     	; 0x1094 <displayUpdateWorker+0x54>
		displayUpdate = 0;
    1054:	10 92 2e 20 	sts	0x202E, r1	; 0x80202e <displayUpdate>
		for(int i = 0; i < 4; i++) {
    1058:	19 82       	std	Y+1, r1	; 0x01
    105a:	1a 82       	std	Y+2, r1	; 0x02
    105c:	17 c0       	rjmp	.+46     	; 0x108c <displayUpdateWorker+0x4c>
			displayWriteStringAtPos(i,0,&displayBuffer[i][0]);
    105e:	29 81       	ldd	r18, Y+1	; 0x01
    1060:	3a 81       	ldd	r19, Y+2	; 0x02
    1062:	44 e1       	ldi	r20, 0x14	; 20
    1064:	42 9f       	mul	r20, r18
    1066:	c0 01       	movw	r24, r0
    1068:	43 9f       	mul	r20, r19
    106a:	90 0d       	add	r25, r0
    106c:	11 24       	eor	r1, r1
    106e:	9c 01       	movw	r18, r24
    1070:	25 5c       	subi	r18, 0xC5	; 197
    1072:	3f 4d       	sbci	r19, 0xDF	; 223
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	a9 01       	movw	r20, r18
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	0e 94 48 07 	call	0xe90	; 0xe90 <displayWriteStringAtPos>
}
uint8_t displayUpdate = 0;
void displayUpdateWorker(void) {
	if(displayUpdate > 0) {
		displayUpdate = 0;
		for(int i = 0; i < 4; i++) {
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	04 97       	sbiw	r24, 0x04	; 4
    1092:	2c f3       	brlt	.-54     	; 0x105e <displayUpdateWorker+0x1e>
			displayWriteStringAtPos(i,0,&displayBuffer[i][0]);
		}	
	}
}
    1094:	00 00       	nop
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	08 95       	ret

000010a0 <__vector_108>:
 ISR(TCF0_OVF_vect) {
    10a0:	1f 92       	push	r1
    10a2:	0f 92       	push	r0
    10a4:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    10a8:	0f 92       	push	r0
    10aa:	11 24       	eor	r1, r1
    10ac:	8f 93       	push	r24
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
	//Timer F0 Overflow
	//Update Display
	//Write Buffer to Display
	displayUpdate = 1;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	80 93 2e 20 	sts	0x202E, r24	; 0x80202e <displayUpdate>
 }
    10bc:	00 00       	nop
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	8f 91       	pop	r24
    10c4:	0f 90       	pop	r0
    10c6:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
    10ca:	0f 90       	pop	r0
    10cc:	1f 90       	pop	r1
    10ce:	18 95       	reti

000010d0 <tenToThePowerOf>:
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	28 97       	sbiw	r28, 0x08	; 8
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	8f 83       	std	Y+7, r24	; 0x07
    10e0:	98 87       	std	Y+8, r25	; 0x08
    10e2:	19 82       	std	Y+1, r1	; 0x01
    10e4:	1a 82       	std	Y+2, r1	; 0x02
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	a0 e0       	ldi	r26, 0x00	; 0
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	8b 83       	std	Y+3, r24	; 0x03
    10f0:	9c 83       	std	Y+4, r25	; 0x04
    10f2:	ad 83       	std	Y+5, r26	; 0x05
    10f4:	be 83       	std	Y+6, r27	; 0x06
    10f6:	19 82       	std	Y+1, r1	; 0x01
    10f8:	1a 82       	std	Y+2, r1	; 0x02
    10fa:	1f c0       	rjmp	.+62     	; 0x113a <tenToThePowerOf+0x6a>
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	ad 81       	ldd	r26, Y+5	; 0x05
    1102:	be 81       	ldd	r27, Y+6	; 0x06
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	aa 1f       	adc	r26, r26
    110a:	bb 1f       	adc	r27, r27
    110c:	9c 01       	movw	r18, r24
    110e:	ad 01       	movw	r20, r26
    1110:	22 0f       	add	r18, r18
    1112:	33 1f       	adc	r19, r19
    1114:	44 1f       	adc	r20, r20
    1116:	55 1f       	adc	r21, r21
    1118:	22 0f       	add	r18, r18
    111a:	33 1f       	adc	r19, r19
    111c:	44 1f       	adc	r20, r20
    111e:	55 1f       	adc	r21, r21
    1120:	82 0f       	add	r24, r18
    1122:	93 1f       	adc	r25, r19
    1124:	a4 1f       	adc	r26, r20
    1126:	b5 1f       	adc	r27, r21
    1128:	8b 83       	std	Y+3, r24	; 0x03
    112a:	9c 83       	std	Y+4, r25	; 0x04
    112c:	ad 83       	std	Y+5, r26	; 0x05
    112e:	be 83       	std	Y+6, r27	; 0x06
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	9a 83       	std	Y+2, r25	; 0x02
    113a:	29 81       	ldd	r18, Y+1	; 0x01
    113c:	3a 81       	ldd	r19, Y+2	; 0x02
    113e:	8f 81       	ldd	r24, Y+7	; 0x07
    1140:	98 85       	ldd	r25, Y+8	; 0x08
    1142:	28 17       	cp	r18, r24
    1144:	39 07       	cpc	r19, r25
    1146:	d4 f2       	brlt	.-76     	; 0x10fc <tenToThePowerOf+0x2c>
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	ad 81       	ldd	r26, Y+5	; 0x05
    114e:	be 81       	ldd	r27, Y+6	; 0x06
    1150:	bc 01       	movw	r22, r24
    1152:	cd 01       	movw	r24, r26
    1154:	28 96       	adiw	r28, 0x08	; 8
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	08 95       	ret

00001160 <convert_uint_string>:
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	2f 97       	sbiw	r28, 0x0f	; 15
    116a:	cd bf       	out	0x3d, r28	; 61
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	8c 87       	std	Y+12, r24	; 0x0c
    1170:	9d 87       	std	Y+13, r25	; 0x0d
    1172:	6e 87       	std	Y+14, r22	; 0x0e
    1174:	7f 87       	std	Y+15, r23	; 0x0f
    1176:	19 82       	std	Y+1, r1	; 0x01
    1178:	1a 82       	std	Y+2, r1	; 0x02
    117a:	1b 82       	std	Y+3, r1	; 0x03
    117c:	1c 82       	std	Y+4, r1	; 0x04
    117e:	1d 82       	std	Y+5, r1	; 0x05
    1180:	1e 82       	std	Y+6, r1	; 0x06
    1182:	8c 85       	ldd	r24, Y+12	; 0x0c
    1184:	9d 85       	ldd	r25, Y+13	; 0x0d
    1186:	89 2b       	or	r24, r25
    1188:	09 f4       	brne	.+2      	; 0x118c <convert_uint_string+0x2c>
    118a:	75 c0       	rjmp	.+234    	; 0x1276 <convert_uint_string+0x116>
    118c:	39 c0       	rjmp	.+114    	; 0x1200 <convert_uint_string+0xa0>
    118e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1190:	5d 85       	ldd	r21, Y+13	; 0x0d
    1192:	9a 01       	movw	r18, r20
    1194:	ad ec       	ldi	r26, 0xCD	; 205
    1196:	bc ec       	ldi	r27, 0xCC	; 204
    1198:	0e 94 cf 0c 	call	0x199e	; 0x199e <__umulhisi3>
    119c:	96 95       	lsr	r25
    119e:	87 95       	ror	r24
    11a0:	96 95       	lsr	r25
    11a2:	87 95       	ror	r24
    11a4:	96 95       	lsr	r25
    11a6:	87 95       	ror	r24
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	9c 01       	movw	r18, r24
    11ae:	22 0f       	add	r18, r18
    11b0:	33 1f       	adc	r19, r19
    11b2:	22 0f       	add	r18, r18
    11b4:	33 1f       	adc	r19, r19
    11b6:	82 0f       	add	r24, r18
    11b8:	93 1f       	adc	r25, r19
    11ba:	9a 01       	movw	r18, r20
    11bc:	28 1b       	sub	r18, r24
    11be:	39 0b       	sbc	r19, r25
    11c0:	c9 01       	movw	r24, r18
    11c2:	40 e3       	ldi	r20, 0x30	; 48
    11c4:	48 0f       	add	r20, r24
    11c6:	9e 01       	movw	r18, r28
    11c8:	29 5f       	subi	r18, 0xF9	; 249
    11ca:	3f 4f       	sbci	r19, 0xFF	; 255
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	82 0f       	add	r24, r18
    11d2:	93 1f       	adc	r25, r19
    11d4:	fc 01       	movw	r30, r24
    11d6:	40 83       	st	Z, r20
    11d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    11da:	9d 85       	ldd	r25, Y+13	; 0x0d
    11dc:	9c 01       	movw	r18, r24
    11de:	ad ec       	ldi	r26, 0xCD	; 205
    11e0:	bc ec       	ldi	r27, 0xCC	; 204
    11e2:	0e 94 cf 0c 	call	0x199e	; 0x199e <__umulhisi3>
    11e6:	96 95       	lsr	r25
    11e8:	87 95       	ror	r24
    11ea:	96 95       	lsr	r25
    11ec:	87 95       	ror	r24
    11ee:	96 95       	lsr	r25
    11f0:	87 95       	ror	r24
    11f2:	8c 87       	std	Y+12, r24	; 0x0c
    11f4:	9d 87       	std	Y+13, r25	; 0x0d
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	8c 85       	ldd	r24, Y+12	; 0x0c
    1202:	9d 85       	ldd	r25, Y+13	; 0x0d
    1204:	89 2b       	or	r24, r25
    1206:	19 f6       	brne	.-122    	; 0x118e <convert_uint_string+0x2e>
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	9a 81       	ldd	r25, Y+2	; 0x02
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	9e 83       	std	Y+6, r25	; 0x06
    1210:	1b 82       	std	Y+3, r1	; 0x03
    1212:	1c 82       	std	Y+4, r1	; 0x04
    1214:	2b c0       	rjmp	.+86     	; 0x126c <convert_uint_string+0x10c>
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	9a 81       	ldd	r25, Y+2	; 0x02
    121a:	18 16       	cp	r1, r24
    121c:	19 06       	cpc	r1, r25
    121e:	cc f4       	brge	.+50     	; 0x1252 <convert_uint_string+0xf2>
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	2e 85       	ldd	r18, Y+14	; 0x0e
    1226:	3f 85       	ldd	r19, Y+15	; 0x0f
    1228:	82 0f       	add	r24, r18
    122a:	93 1f       	adc	r25, r19
    122c:	29 81       	ldd	r18, Y+1	; 0x01
    122e:	3a 81       	ldd	r19, Y+2	; 0x02
    1230:	21 50       	subi	r18, 0x01	; 1
    1232:	31 09       	sbc	r19, r1
    1234:	ae 01       	movw	r20, r28
    1236:	49 5f       	subi	r20, 0xF9	; 249
    1238:	5f 4f       	sbci	r21, 0xFF	; 255
    123a:	24 0f       	add	r18, r20
    123c:	35 1f       	adc	r19, r21
    123e:	f9 01       	movw	r30, r18
    1240:	20 81       	ld	r18, Z
    1242:	fc 01       	movw	r30, r24
    1244:	20 83       	st	Z, r18
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	9a 83       	std	Y+2, r25	; 0x02
    1250:	08 c0       	rjmp	.+16     	; 0x1262 <convert_uint_string+0x102>
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	2e 85       	ldd	r18, Y+14	; 0x0e
    1258:	3f 85       	ldd	r19, Y+15	; 0x0f
    125a:	82 0f       	add	r24, r18
    125c:	93 1f       	adc	r25, r19
    125e:	fc 01       	movw	r30, r24
    1260:	10 82       	st	Z, r1
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	8b 83       	std	Y+3, r24	; 0x03
    126a:	9c 83       	std	Y+4, r25	; 0x04
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	06 97       	sbiw	r24, 0x06	; 6
    1272:	8c f2       	brlt	.-94     	; 0x1216 <convert_uint_string+0xb6>
    1274:	0e c0       	rjmp	.+28     	; 0x1292 <convert_uint_string+0x132>
    1276:	8e 85       	ldd	r24, Y+14	; 0x0e
    1278:	9f 85       	ldd	r25, Y+15	; 0x0f
    127a:	20 e3       	ldi	r18, 0x30	; 48
    127c:	fc 01       	movw	r30, r24
    127e:	20 83       	st	Z, r18
    1280:	8e 85       	ldd	r24, Y+14	; 0x0e
    1282:	9f 85       	ldd	r25, Y+15	; 0x0f
    1284:	01 96       	adiw	r24, 0x01	; 1
    1286:	fc 01       	movw	r30, r24
    1288:	10 82       	st	Z, r1
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	8d 83       	std	Y+5, r24	; 0x05
    1290:	9e 83       	std	Y+6, r25	; 0x06
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	9e 81       	ldd	r25, Y+6	; 0x06
    1296:	2f 96       	adiw	r28, 0x0f	; 15
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	08 95       	ret

000012a2 <convert_float_string>:
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	a8 97       	sbiw	r28, 0x28	; 40
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	69 a3       	std	Y+33, r22	; 0x21
    12b2:	7a a3       	std	Y+34, r23	; 0x22
    12b4:	8b a3       	std	Y+35, r24	; 0x23
    12b6:	9c a3       	std	Y+36, r25	; 0x24
    12b8:	4d a3       	std	Y+37, r20	; 0x25
    12ba:	5e a3       	std	Y+38, r21	; 0x26
    12bc:	2f a3       	std	Y+39, r18	; 0x27
    12be:	38 a7       	std	Y+40, r19	; 0x28
    12c0:	19 82       	std	Y+1, r1	; 0x01
    12c2:	1a 82       	std	Y+2, r1	; 0x02
    12c4:	1b 82       	std	Y+3, r1	; 0x03
    12c6:	1c 82       	std	Y+4, r1	; 0x04
    12c8:	1d 82       	std	Y+5, r1	; 0x05
    12ca:	1e 82       	std	Y+6, r1	; 0x06
    12cc:	1f 82       	std	Y+7, r1	; 0x07
    12ce:	18 86       	std	Y+8, r1	; 0x08
    12d0:	19 86       	std	Y+9, r1	; 0x09
    12d2:	1a 86       	std	Y+10, r1	; 0x0a
    12d4:	1f 86       	std	Y+15, r1	; 0x0f
    12d6:	18 8a       	std	Y+16, r1	; 0x10
    12d8:	8f a1       	ldd	r24, Y+39	; 0x27
    12da:	98 a5       	ldd	r25, Y+40	; 0x28
    12dc:	0e 94 68 08 	call	0x10d0	; 0x10d0 <tenToThePowerOf>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	bc 01       	movw	r22, r24
    12e6:	cd 01       	movw	r24, r26
    12e8:	0e 94 a5 0b 	call	0x174a	; 0x174a <__floatunsisf>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	29 a1       	ldd	r18, Y+33	; 0x21
    12f2:	3a a1       	ldd	r19, Y+34	; 0x22
    12f4:	4b a1       	ldd	r20, Y+35	; 0x23
    12f6:	5c a1       	ldd	r21, Y+36	; 0x24
    12f8:	bc 01       	movw	r22, r24
    12fa:	cd 01       	movw	r24, r26
    12fc:	0e 94 33 0c 	call	0x1866	; 0x1866 <__mulsf3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	bc 01       	movw	r22, r24
    1306:	cd 01       	movw	r24, r26
    1308:	0e 94 6f 0b 	call	0x16de	; 0x16de <__fixsfsi>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	8b 87       	std	Y+11, r24	; 0x0b
    1312:	9c 87       	std	Y+12, r25	; 0x0c
    1314:	ad 87       	std	Y+13, r26	; 0x0d
    1316:	be 87       	std	Y+14, r27	; 0x0e
    1318:	8b 85       	ldd	r24, Y+11	; 0x0b
    131a:	9c 85       	ldd	r25, Y+12	; 0x0c
    131c:	ad 85       	ldd	r26, Y+13	; 0x0d
    131e:	be 85       	ldd	r27, Y+14	; 0x0e
    1320:	bb 23       	and	r27, r27
    1322:	9c f4       	brge	.+38     	; 0x134a <convert_float_string+0xa8>
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	89 87       	std	Y+9, r24	; 0x09
    132a:	9a 87       	std	Y+10, r25	; 0x0a
    132c:	8b 85       	ldd	r24, Y+11	; 0x0b
    132e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1330:	ad 85       	ldd	r26, Y+13	; 0x0d
    1332:	be 85       	ldd	r27, Y+14	; 0x0e
    1334:	b0 95       	com	r27
    1336:	a0 95       	com	r26
    1338:	90 95       	com	r25
    133a:	81 95       	neg	r24
    133c:	9f 4f       	sbci	r25, 0xFF	; 255
    133e:	af 4f       	sbci	r26, 0xFF	; 255
    1340:	bf 4f       	sbci	r27, 0xFF	; 255
    1342:	8b 87       	std	Y+11, r24	; 0x0b
    1344:	9c 87       	std	Y+12, r25	; 0x0c
    1346:	ad 87       	std	Y+13, r26	; 0x0d
    1348:	be 87       	std	Y+14, r27	; 0x0e
    134a:	8b 85       	ldd	r24, Y+11	; 0x0b
    134c:	9c 85       	ldd	r25, Y+12	; 0x0c
    134e:	ad 85       	ldd	r26, Y+13	; 0x0d
    1350:	be 85       	ldd	r27, Y+14	; 0x0e
    1352:	18 16       	cp	r1, r24
    1354:	19 06       	cpc	r1, r25
    1356:	1a 06       	cpc	r1, r26
    1358:	1b 06       	cpc	r1, r27
    135a:	0c f0       	brlt	.+2      	; 0x135e <convert_float_string+0xbc>
    135c:	cb c0       	rjmp	.+406    	; 0x14f4 <convert_float_string+0x252>
    135e:	30 c0       	rjmp	.+96     	; 0x13c0 <convert_float_string+0x11e>
    1360:	8b 85       	ldd	r24, Y+11	; 0x0b
    1362:	9c 85       	ldd	r25, Y+12	; 0x0c
    1364:	ad 85       	ldd	r26, Y+13	; 0x0d
    1366:	be 85       	ldd	r27, Y+14	; 0x0e
    1368:	2a e0       	ldi	r18, 0x0A	; 10
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	bc 01       	movw	r22, r24
    1372:	cd 01       	movw	r24, r26
    1374:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__divmodsi4>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	40 e3       	ldi	r20, 0x30	; 48
    137e:	48 0f       	add	r20, r24
    1380:	9e 01       	movw	r18, r28
    1382:	2f 5e       	subi	r18, 0xEF	; 239
    1384:	3f 4f       	sbci	r19, 0xFF	; 255
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	9a 81       	ldd	r25, Y+2	; 0x02
    138a:	82 0f       	add	r24, r18
    138c:	93 1f       	adc	r25, r19
    138e:	fc 01       	movw	r30, r24
    1390:	40 83       	st	Z, r20
    1392:	8b 85       	ldd	r24, Y+11	; 0x0b
    1394:	9c 85       	ldd	r25, Y+12	; 0x0c
    1396:	ad 85       	ldd	r26, Y+13	; 0x0d
    1398:	be 85       	ldd	r27, Y+14	; 0x0e
    139a:	2a e0       	ldi	r18, 0x0A	; 10
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	bc 01       	movw	r22, r24
    13a4:	cd 01       	movw	r24, r26
    13a6:	0e 94 b0 0c 	call	0x1960	; 0x1960 <__divmodsi4>
    13aa:	da 01       	movw	r26, r20
    13ac:	c9 01       	movw	r24, r18
    13ae:	8b 87       	std	Y+11, r24	; 0x0b
    13b0:	9c 87       	std	Y+12, r25	; 0x0c
    13b2:	ad 87       	std	Y+13, r26	; 0x0d
    13b4:	be 87       	std	Y+14, r27	; 0x0e
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ba:	01 96       	adiw	r24, 0x01	; 1
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	9a 83       	std	Y+2, r25	; 0x02
    13c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    13c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    13c4:	ad 85       	ldd	r26, Y+13	; 0x0d
    13c6:	be 85       	ldd	r27, Y+14	; 0x0e
    13c8:	18 16       	cp	r1, r24
    13ca:	19 06       	cpc	r1, r25
    13cc:	1a 06       	cpc	r1, r26
    13ce:	1b 06       	cpc	r1, r27
    13d0:	3c f2       	brlt	.-114    	; 0x1360 <convert_float_string+0xbe>
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	9a 81       	ldd	r25, Y+2	; 0x02
    13d6:	01 96       	adiw	r24, 0x01	; 1
    13d8:	8d 83       	std	Y+5, r24	; 0x05
    13da:	9e 83       	std	Y+6, r25	; 0x06
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	9a 83       	std	Y+2, r25	; 0x02
    13e4:	1b 82       	std	Y+3, r1	; 0x03
    13e6:	1c 82       	std	Y+4, r1	; 0x04
    13e8:	47 c0       	rjmp	.+142    	; 0x1478 <convert_float_string+0x1d6>
    13ea:	2d 81       	ldd	r18, Y+5	; 0x05
    13ec:	3e 81       	ldd	r19, Y+6	; 0x06
    13ee:	8f a1       	ldd	r24, Y+39	; 0x27
    13f0:	98 a5       	ldd	r25, Y+40	; 0x28
    13f2:	a9 01       	movw	r20, r18
    13f4:	48 1b       	sub	r20, r24
    13f6:	59 0b       	sbc	r21, r25
    13f8:	ca 01       	movw	r24, r20
    13fa:	9c 01       	movw	r18, r24
    13fc:	21 50       	subi	r18, 0x01	; 1
    13fe:	31 09       	sbc	r19, r1
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	9c 81       	ldd	r25, Y+4	; 0x04
    1404:	28 17       	cp	r18, r24
    1406:	39 07       	cpc	r19, r25
    1408:	59 f4       	brne	.+22     	; 0x1420 <convert_float_string+0x17e>
    140a:	9e 01       	movw	r18, r28
    140c:	27 5e       	subi	r18, 0xE7	; 231
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	82 0f       	add	r24, r18
    1416:	93 1f       	adc	r25, r19
    1418:	2e e2       	ldi	r18, 0x2E	; 46
    141a:	fc 01       	movw	r30, r24
    141c:	20 83       	st	Z, r18
    141e:	27 c0       	rjmp	.+78     	; 0x146e <convert_float_string+0x1cc>
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	18 16       	cp	r1, r24
    1426:	19 06       	cpc	r1, r25
    1428:	cc f4       	brge	.+50     	; 0x145c <convert_float_string+0x1ba>
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	02 97       	sbiw	r24, 0x02	; 2
    1430:	9e 01       	movw	r18, r28
    1432:	2f 5e       	subi	r18, 0xEF	; 239
    1434:	3f 4f       	sbci	r19, 0xFF	; 255
    1436:	82 0f       	add	r24, r18
    1438:	93 1f       	adc	r25, r19
    143a:	fc 01       	movw	r30, r24
    143c:	40 81       	ld	r20, Z
    143e:	9e 01       	movw	r18, r28
    1440:	27 5e       	subi	r18, 0xE7	; 231
    1442:	3f 4f       	sbci	r19, 0xFF	; 255
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	fc 01       	movw	r30, r24
    144e:	40 83       	st	Z, r20
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	9a 81       	ldd	r25, Y+2	; 0x02
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	9a 83       	std	Y+2, r25	; 0x02
    145a:	09 c0       	rjmp	.+18     	; 0x146e <convert_float_string+0x1cc>
    145c:	9e 01       	movw	r18, r28
    145e:	27 5e       	subi	r18, 0xE7	; 231
    1460:	3f 4f       	sbci	r19, 0xFF	; 255
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	82 0f       	add	r24, r18
    1468:	93 1f       	adc	r25, r19
    146a:	fc 01       	movw	r30, r24
    146c:	10 82       	st	Z, r1
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	8b 83       	std	Y+3, r24	; 0x03
    1476:	9c 83       	std	Y+4, r25	; 0x04
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	08 97       	sbiw	r24, 0x08	; 8
    147e:	0c f4       	brge	.+2      	; 0x1482 <convert_float_string+0x1e0>
    1480:	b4 cf       	rjmp	.-152    	; 0x13ea <convert_float_string+0x148>
    1482:	89 85       	ldd	r24, Y+9	; 0x09
    1484:	9a 85       	ldd	r25, Y+10	; 0x0a
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	71 f4       	brne	.+28     	; 0x14a6 <convert_float_string+0x204>
    148a:	8d a1       	ldd	r24, Y+37	; 0x25
    148c:	9e a1       	ldd	r25, Y+38	; 0x26
    148e:	2d e2       	ldi	r18, 0x2D	; 45
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
    1496:	9e 81       	ldd	r25, Y+6	; 0x06
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	8d 83       	std	Y+5, r24	; 0x05
    149c:	9e 83       	std	Y+6, r25	; 0x06
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	8f 83       	std	Y+7, r24	; 0x07
    14a4:	98 87       	std	Y+8, r25	; 0x08
    14a6:	19 82       	std	Y+1, r1	; 0x01
    14a8:	1a 82       	std	Y+2, r1	; 0x02
    14aa:	8f 81       	ldd	r24, Y+7	; 0x07
    14ac:	98 85       	ldd	r25, Y+8	; 0x08
    14ae:	8b 83       	std	Y+3, r24	; 0x03
    14b0:	9c 83       	std	Y+4, r25	; 0x04
    14b2:	1b c0       	rjmp	.+54     	; 0x14ea <convert_float_string+0x248>
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	2d a1       	ldd	r18, Y+37	; 0x25
    14ba:	3e a1       	ldd	r19, Y+38	; 0x26
    14bc:	82 0f       	add	r24, r18
    14be:	93 1f       	adc	r25, r19
    14c0:	ae 01       	movw	r20, r28
    14c2:	47 5e       	subi	r20, 0xE7	; 231
    14c4:	5f 4f       	sbci	r21, 0xFF	; 255
    14c6:	29 81       	ldd	r18, Y+1	; 0x01
    14c8:	3a 81       	ldd	r19, Y+2	; 0x02
    14ca:	24 0f       	add	r18, r20
    14cc:	35 1f       	adc	r19, r21
    14ce:	f9 01       	movw	r30, r18
    14d0:	20 81       	ld	r18, Z
    14d2:	fc 01       	movw	r30, r24
    14d4:	20 83       	st	Z, r18
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	9a 83       	std	Y+2, r25	; 0x02
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	8b 83       	std	Y+3, r24	; 0x03
    14e8:	9c 83       	std	Y+4, r25	; 0x04
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	08 97       	sbiw	r24, 0x08	; 8
    14f0:	0c f3       	brlt	.-62     	; 0x14b4 <convert_float_string+0x212>
    14f2:	0e c0       	rjmp	.+28     	; 0x1510 <convert_float_string+0x26e>
    14f4:	8d a1       	ldd	r24, Y+37	; 0x25
    14f6:	9e a1       	ldd	r25, Y+38	; 0x26
    14f8:	20 e3       	ldi	r18, 0x30	; 48
    14fa:	fc 01       	movw	r30, r24
    14fc:	20 83       	st	Z, r18
    14fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1500:	9e a1       	ldd	r25, Y+38	; 0x26
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	fc 01       	movw	r30, r24
    1506:	10 82       	st	Z, r1
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	8d 83       	std	Y+5, r24	; 0x05
    150e:	9e 83       	std	Y+6, r25	; 0x06
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	a8 96       	adiw	r28, 0x28	; 40
    1516:	cd bf       	out	0x3d, r28	; 61
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <__subsf3>:
    1520:	50 58       	subi	r21, 0x80	; 128

00001522 <__addsf3>:
    1522:	bb 27       	eor	r27, r27
    1524:	aa 27       	eor	r26, r26
    1526:	0e 94 a8 0a 	call	0x1550	; 0x1550 <__addsf3x>
    152a:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <__fp_round>
    152e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fp_pscA>
    1532:	38 f0       	brcs	.+14     	; 0x1542 <__addsf3+0x20>
    1534:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__fp_pscB>
    1538:	20 f0       	brcs	.+8      	; 0x1542 <__addsf3+0x20>
    153a:	39 f4       	brne	.+14     	; 0x154a <__addsf3+0x28>
    153c:	9f 3f       	cpi	r25, 0xFF	; 255
    153e:	19 f4       	brne	.+6      	; 0x1546 <__addsf3+0x24>
    1540:	26 f4       	brtc	.+8      	; 0x154a <__addsf3+0x28>
    1542:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__fp_nan>
    1546:	0e f4       	brtc	.+2      	; 0x154a <__addsf3+0x28>
    1548:	e0 95       	com	r30
    154a:	e7 fb       	bst	r30, 7
    154c:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__fp_inf>

00001550 <__addsf3x>:
    1550:	e9 2f       	mov	r30, r25
    1552:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__fp_split3>
    1556:	58 f3       	brcs	.-42     	; 0x152e <__addsf3+0xc>
    1558:	ba 17       	cp	r27, r26
    155a:	62 07       	cpc	r22, r18
    155c:	73 07       	cpc	r23, r19
    155e:	84 07       	cpc	r24, r20
    1560:	95 07       	cpc	r25, r21
    1562:	20 f0       	brcs	.+8      	; 0x156c <__addsf3x+0x1c>
    1564:	79 f4       	brne	.+30     	; 0x1584 <__addsf3x+0x34>
    1566:	a6 f5       	brtc	.+104    	; 0x15d0 <__addsf3x+0x80>
    1568:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_zero>
    156c:	0e f4       	brtc	.+2      	; 0x1570 <__addsf3x+0x20>
    156e:	e0 95       	com	r30
    1570:	0b 2e       	mov	r0, r27
    1572:	ba 2f       	mov	r27, r26
    1574:	a0 2d       	mov	r26, r0
    1576:	0b 01       	movw	r0, r22
    1578:	b9 01       	movw	r22, r18
    157a:	90 01       	movw	r18, r0
    157c:	0c 01       	movw	r0, r24
    157e:	ca 01       	movw	r24, r20
    1580:	a0 01       	movw	r20, r0
    1582:	11 24       	eor	r1, r1
    1584:	ff 27       	eor	r31, r31
    1586:	59 1b       	sub	r21, r25
    1588:	99 f0       	breq	.+38     	; 0x15b0 <__addsf3x+0x60>
    158a:	59 3f       	cpi	r21, 0xF9	; 249
    158c:	50 f4       	brcc	.+20     	; 0x15a2 <__addsf3x+0x52>
    158e:	50 3e       	cpi	r21, 0xE0	; 224
    1590:	68 f1       	brcs	.+90     	; 0x15ec <__addsf3x+0x9c>
    1592:	1a 16       	cp	r1, r26
    1594:	f0 40       	sbci	r31, 0x00	; 0
    1596:	a2 2f       	mov	r26, r18
    1598:	23 2f       	mov	r18, r19
    159a:	34 2f       	mov	r19, r20
    159c:	44 27       	eor	r20, r20
    159e:	58 5f       	subi	r21, 0xF8	; 248
    15a0:	f3 cf       	rjmp	.-26     	; 0x1588 <__addsf3x+0x38>
    15a2:	46 95       	lsr	r20
    15a4:	37 95       	ror	r19
    15a6:	27 95       	ror	r18
    15a8:	a7 95       	ror	r26
    15aa:	f0 40       	sbci	r31, 0x00	; 0
    15ac:	53 95       	inc	r21
    15ae:	c9 f7       	brne	.-14     	; 0x15a2 <__addsf3x+0x52>
    15b0:	7e f4       	brtc	.+30     	; 0x15d0 <__addsf3x+0x80>
    15b2:	1f 16       	cp	r1, r31
    15b4:	ba 0b       	sbc	r27, r26
    15b6:	62 0b       	sbc	r22, r18
    15b8:	73 0b       	sbc	r23, r19
    15ba:	84 0b       	sbc	r24, r20
    15bc:	ba f0       	brmi	.+46     	; 0x15ec <__addsf3x+0x9c>
    15be:	91 50       	subi	r25, 0x01	; 1
    15c0:	a1 f0       	breq	.+40     	; 0x15ea <__addsf3x+0x9a>
    15c2:	ff 0f       	add	r31, r31
    15c4:	bb 1f       	adc	r27, r27
    15c6:	66 1f       	adc	r22, r22
    15c8:	77 1f       	adc	r23, r23
    15ca:	88 1f       	adc	r24, r24
    15cc:	c2 f7       	brpl	.-16     	; 0x15be <__addsf3x+0x6e>
    15ce:	0e c0       	rjmp	.+28     	; 0x15ec <__addsf3x+0x9c>
    15d0:	ba 0f       	add	r27, r26
    15d2:	62 1f       	adc	r22, r18
    15d4:	73 1f       	adc	r23, r19
    15d6:	84 1f       	adc	r24, r20
    15d8:	48 f4       	brcc	.+18     	; 0x15ec <__addsf3x+0x9c>
    15da:	87 95       	ror	r24
    15dc:	77 95       	ror	r23
    15de:	67 95       	ror	r22
    15e0:	b7 95       	ror	r27
    15e2:	f7 95       	ror	r31
    15e4:	9e 3f       	cpi	r25, 0xFE	; 254
    15e6:	08 f0       	brcs	.+2      	; 0x15ea <__addsf3x+0x9a>
    15e8:	b0 cf       	rjmp	.-160    	; 0x154a <__addsf3+0x28>
    15ea:	93 95       	inc	r25
    15ec:	88 0f       	add	r24, r24
    15ee:	08 f0       	brcs	.+2      	; 0x15f2 <__addsf3x+0xa2>
    15f0:	99 27       	eor	r25, r25
    15f2:	ee 0f       	add	r30, r30
    15f4:	97 95       	ror	r25
    15f6:	87 95       	ror	r24
    15f8:	08 95       	ret

000015fa <__divsf3>:
    15fa:	0e 94 11 0b 	call	0x1622	; 0x1622 <__divsf3x>
    15fe:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <__fp_round>
    1602:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__fp_pscB>
    1606:	58 f0       	brcs	.+22     	; 0x161e <__divsf3+0x24>
    1608:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fp_pscA>
    160c:	40 f0       	brcs	.+16     	; 0x161e <__divsf3+0x24>
    160e:	29 f4       	brne	.+10     	; 0x161a <__divsf3+0x20>
    1610:	5f 3f       	cpi	r21, 0xFF	; 255
    1612:	29 f0       	breq	.+10     	; 0x161e <__divsf3+0x24>
    1614:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__fp_inf>
    1618:	51 11       	cpse	r21, r1
    161a:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_szero>
    161e:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__fp_nan>

00001622 <__divsf3x>:
    1622:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__fp_split3>
    1626:	68 f3       	brcs	.-38     	; 0x1602 <__divsf3+0x8>

00001628 <__divsf3_pse>:
    1628:	99 23       	and	r25, r25
    162a:	b1 f3       	breq	.-20     	; 0x1618 <__divsf3+0x1e>
    162c:	55 23       	and	r21, r21
    162e:	91 f3       	breq	.-28     	; 0x1614 <__divsf3+0x1a>
    1630:	95 1b       	sub	r25, r21
    1632:	55 0b       	sbc	r21, r21
    1634:	bb 27       	eor	r27, r27
    1636:	aa 27       	eor	r26, r26
    1638:	62 17       	cp	r22, r18
    163a:	73 07       	cpc	r23, r19
    163c:	84 07       	cpc	r24, r20
    163e:	38 f0       	brcs	.+14     	; 0x164e <__divsf3_pse+0x26>
    1640:	9f 5f       	subi	r25, 0xFF	; 255
    1642:	5f 4f       	sbci	r21, 0xFF	; 255
    1644:	22 0f       	add	r18, r18
    1646:	33 1f       	adc	r19, r19
    1648:	44 1f       	adc	r20, r20
    164a:	aa 1f       	adc	r26, r26
    164c:	a9 f3       	breq	.-22     	; 0x1638 <__divsf3_pse+0x10>
    164e:	35 d0       	rcall	.+106    	; 0x16ba <__divsf3_pse+0x92>
    1650:	0e 2e       	mov	r0, r30
    1652:	3a f0       	brmi	.+14     	; 0x1662 <__divsf3_pse+0x3a>
    1654:	e0 e8       	ldi	r30, 0x80	; 128
    1656:	32 d0       	rcall	.+100    	; 0x16bc <__divsf3_pse+0x94>
    1658:	91 50       	subi	r25, 0x01	; 1
    165a:	50 40       	sbci	r21, 0x00	; 0
    165c:	e6 95       	lsr	r30
    165e:	00 1c       	adc	r0, r0
    1660:	ca f7       	brpl	.-14     	; 0x1654 <__divsf3_pse+0x2c>
    1662:	2b d0       	rcall	.+86     	; 0x16ba <__divsf3_pse+0x92>
    1664:	fe 2f       	mov	r31, r30
    1666:	29 d0       	rcall	.+82     	; 0x16ba <__divsf3_pse+0x92>
    1668:	66 0f       	add	r22, r22
    166a:	77 1f       	adc	r23, r23
    166c:	88 1f       	adc	r24, r24
    166e:	bb 1f       	adc	r27, r27
    1670:	26 17       	cp	r18, r22
    1672:	37 07       	cpc	r19, r23
    1674:	48 07       	cpc	r20, r24
    1676:	ab 07       	cpc	r26, r27
    1678:	b0 e8       	ldi	r27, 0x80	; 128
    167a:	09 f0       	breq	.+2      	; 0x167e <__divsf3_pse+0x56>
    167c:	bb 0b       	sbc	r27, r27
    167e:	80 2d       	mov	r24, r0
    1680:	bf 01       	movw	r22, r30
    1682:	ff 27       	eor	r31, r31
    1684:	93 58       	subi	r25, 0x83	; 131
    1686:	5f 4f       	sbci	r21, 0xFF	; 255
    1688:	3a f0       	brmi	.+14     	; 0x1698 <__divsf3_pse+0x70>
    168a:	9e 3f       	cpi	r25, 0xFE	; 254
    168c:	51 05       	cpc	r21, r1
    168e:	78 f0       	brcs	.+30     	; 0x16ae <__divsf3_pse+0x86>
    1690:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__fp_inf>
    1694:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_szero>
    1698:	5f 3f       	cpi	r21, 0xFF	; 255
    169a:	e4 f3       	brlt	.-8      	; 0x1694 <__divsf3_pse+0x6c>
    169c:	98 3e       	cpi	r25, 0xE8	; 232
    169e:	d4 f3       	brlt	.-12     	; 0x1694 <__divsf3_pse+0x6c>
    16a0:	86 95       	lsr	r24
    16a2:	77 95       	ror	r23
    16a4:	67 95       	ror	r22
    16a6:	b7 95       	ror	r27
    16a8:	f7 95       	ror	r31
    16aa:	9f 5f       	subi	r25, 0xFF	; 255
    16ac:	c9 f7       	brne	.-14     	; 0x16a0 <__divsf3_pse+0x78>
    16ae:	88 0f       	add	r24, r24
    16b0:	91 1d       	adc	r25, r1
    16b2:	96 95       	lsr	r25
    16b4:	87 95       	ror	r24
    16b6:	97 f9       	bld	r25, 7
    16b8:	08 95       	ret
    16ba:	e1 e0       	ldi	r30, 0x01	; 1
    16bc:	66 0f       	add	r22, r22
    16be:	77 1f       	adc	r23, r23
    16c0:	88 1f       	adc	r24, r24
    16c2:	bb 1f       	adc	r27, r27
    16c4:	62 17       	cp	r22, r18
    16c6:	73 07       	cpc	r23, r19
    16c8:	84 07       	cpc	r24, r20
    16ca:	ba 07       	cpc	r27, r26
    16cc:	20 f0       	brcs	.+8      	; 0x16d6 <__divsf3_pse+0xae>
    16ce:	62 1b       	sub	r22, r18
    16d0:	73 0b       	sbc	r23, r19
    16d2:	84 0b       	sbc	r24, r20
    16d4:	ba 0b       	sbc	r27, r26
    16d6:	ee 1f       	adc	r30, r30
    16d8:	88 f7       	brcc	.-30     	; 0x16bc <__divsf3_pse+0x94>
    16da:	e0 95       	com	r30
    16dc:	08 95       	ret

000016de <__fixsfsi>:
    16de:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__fixunssfsi>
    16e2:	68 94       	set
    16e4:	b1 11       	cpse	r27, r1
    16e6:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_szero>
    16ea:	08 95       	ret

000016ec <__fixunssfsi>:
    16ec:	0e 94 12 0c 	call	0x1824	; 0x1824 <__fp_splitA>
    16f0:	88 f0       	brcs	.+34     	; 0x1714 <__fixunssfsi+0x28>
    16f2:	9f 57       	subi	r25, 0x7F	; 127
    16f4:	98 f0       	brcs	.+38     	; 0x171c <__fixunssfsi+0x30>
    16f6:	b9 2f       	mov	r27, r25
    16f8:	99 27       	eor	r25, r25
    16fa:	b7 51       	subi	r27, 0x17	; 23
    16fc:	b0 f0       	brcs	.+44     	; 0x172a <__fixunssfsi+0x3e>
    16fe:	e1 f0       	breq	.+56     	; 0x1738 <__fixunssfsi+0x4c>
    1700:	66 0f       	add	r22, r22
    1702:	77 1f       	adc	r23, r23
    1704:	88 1f       	adc	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	1a f0       	brmi	.+6      	; 0x1710 <__fixunssfsi+0x24>
    170a:	ba 95       	dec	r27
    170c:	c9 f7       	brne	.-14     	; 0x1700 <__fixunssfsi+0x14>
    170e:	14 c0       	rjmp	.+40     	; 0x1738 <__fixunssfsi+0x4c>
    1710:	b1 30       	cpi	r27, 0x01	; 1
    1712:	91 f0       	breq	.+36     	; 0x1738 <__fixunssfsi+0x4c>
    1714:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__fp_zero>
    1718:	b1 e0       	ldi	r27, 0x01	; 1
    171a:	08 95       	ret
    171c:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__fp_zero>
    1720:	67 2f       	mov	r22, r23
    1722:	78 2f       	mov	r23, r24
    1724:	88 27       	eor	r24, r24
    1726:	b8 5f       	subi	r27, 0xF8	; 248
    1728:	39 f0       	breq	.+14     	; 0x1738 <__fixunssfsi+0x4c>
    172a:	b9 3f       	cpi	r27, 0xF9	; 249
    172c:	cc f3       	brlt	.-14     	; 0x1720 <__fixunssfsi+0x34>
    172e:	86 95       	lsr	r24
    1730:	77 95       	ror	r23
    1732:	67 95       	ror	r22
    1734:	b3 95       	inc	r27
    1736:	d9 f7       	brne	.-10     	; 0x172e <__fixunssfsi+0x42>
    1738:	3e f4       	brtc	.+14     	; 0x1748 <__fixunssfsi+0x5c>
    173a:	90 95       	com	r25
    173c:	80 95       	com	r24
    173e:	70 95       	com	r23
    1740:	61 95       	neg	r22
    1742:	7f 4f       	sbci	r23, 0xFF	; 255
    1744:	8f 4f       	sbci	r24, 0xFF	; 255
    1746:	9f 4f       	sbci	r25, 0xFF	; 255
    1748:	08 95       	ret

0000174a <__floatunsisf>:
    174a:	e8 94       	clt
    174c:	09 c0       	rjmp	.+18     	; 0x1760 <__floatsisf+0x12>

0000174e <__floatsisf>:
    174e:	97 fb       	bst	r25, 7
    1750:	3e f4       	brtc	.+14     	; 0x1760 <__floatsisf+0x12>
    1752:	90 95       	com	r25
    1754:	80 95       	com	r24
    1756:	70 95       	com	r23
    1758:	61 95       	neg	r22
    175a:	7f 4f       	sbci	r23, 0xFF	; 255
    175c:	8f 4f       	sbci	r24, 0xFF	; 255
    175e:	9f 4f       	sbci	r25, 0xFF	; 255
    1760:	99 23       	and	r25, r25
    1762:	a9 f0       	breq	.+42     	; 0x178e <__floatsisf+0x40>
    1764:	f9 2f       	mov	r31, r25
    1766:	96 e9       	ldi	r25, 0x96	; 150
    1768:	bb 27       	eor	r27, r27
    176a:	93 95       	inc	r25
    176c:	f6 95       	lsr	r31
    176e:	87 95       	ror	r24
    1770:	77 95       	ror	r23
    1772:	67 95       	ror	r22
    1774:	b7 95       	ror	r27
    1776:	f1 11       	cpse	r31, r1
    1778:	f8 cf       	rjmp	.-16     	; 0x176a <__floatsisf+0x1c>
    177a:	fa f4       	brpl	.+62     	; 0x17ba <__floatsisf+0x6c>
    177c:	bb 0f       	add	r27, r27
    177e:	11 f4       	brne	.+4      	; 0x1784 <__floatsisf+0x36>
    1780:	60 ff       	sbrs	r22, 0
    1782:	1b c0       	rjmp	.+54     	; 0x17ba <__floatsisf+0x6c>
    1784:	6f 5f       	subi	r22, 0xFF	; 255
    1786:	7f 4f       	sbci	r23, 0xFF	; 255
    1788:	8f 4f       	sbci	r24, 0xFF	; 255
    178a:	9f 4f       	sbci	r25, 0xFF	; 255
    178c:	16 c0       	rjmp	.+44     	; 0x17ba <__floatsisf+0x6c>
    178e:	88 23       	and	r24, r24
    1790:	11 f0       	breq	.+4      	; 0x1796 <__floatsisf+0x48>
    1792:	96 e9       	ldi	r25, 0x96	; 150
    1794:	11 c0       	rjmp	.+34     	; 0x17b8 <__floatsisf+0x6a>
    1796:	77 23       	and	r23, r23
    1798:	21 f0       	breq	.+8      	; 0x17a2 <__floatsisf+0x54>
    179a:	9e e8       	ldi	r25, 0x8E	; 142
    179c:	87 2f       	mov	r24, r23
    179e:	76 2f       	mov	r23, r22
    17a0:	05 c0       	rjmp	.+10     	; 0x17ac <__floatsisf+0x5e>
    17a2:	66 23       	and	r22, r22
    17a4:	71 f0       	breq	.+28     	; 0x17c2 <__floatsisf+0x74>
    17a6:	96 e8       	ldi	r25, 0x86	; 134
    17a8:	86 2f       	mov	r24, r22
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	2a f0       	brmi	.+10     	; 0x17ba <__floatsisf+0x6c>
    17b0:	9a 95       	dec	r25
    17b2:	66 0f       	add	r22, r22
    17b4:	77 1f       	adc	r23, r23
    17b6:	88 1f       	adc	r24, r24
    17b8:	da f7       	brpl	.-10     	; 0x17b0 <__floatsisf+0x62>
    17ba:	88 0f       	add	r24, r24
    17bc:	96 95       	lsr	r25
    17be:	87 95       	ror	r24
    17c0:	97 f9       	bld	r25, 7
    17c2:	08 95       	ret

000017c4 <__fp_inf>:
    17c4:	97 f9       	bld	r25, 7
    17c6:	9f 67       	ori	r25, 0x7F	; 127
    17c8:	80 e8       	ldi	r24, 0x80	; 128
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	08 95       	ret

000017d0 <__fp_nan>:
    17d0:	9f ef       	ldi	r25, 0xFF	; 255
    17d2:	80 ec       	ldi	r24, 0xC0	; 192
    17d4:	08 95       	ret

000017d6 <__fp_pscA>:
    17d6:	00 24       	eor	r0, r0
    17d8:	0a 94       	dec	r0
    17da:	16 16       	cp	r1, r22
    17dc:	17 06       	cpc	r1, r23
    17de:	18 06       	cpc	r1, r24
    17e0:	09 06       	cpc	r0, r25
    17e2:	08 95       	ret

000017e4 <__fp_pscB>:
    17e4:	00 24       	eor	r0, r0
    17e6:	0a 94       	dec	r0
    17e8:	12 16       	cp	r1, r18
    17ea:	13 06       	cpc	r1, r19
    17ec:	14 06       	cpc	r1, r20
    17ee:	05 06       	cpc	r0, r21
    17f0:	08 95       	ret

000017f2 <__fp_round>:
    17f2:	09 2e       	mov	r0, r25
    17f4:	03 94       	inc	r0
    17f6:	00 0c       	add	r0, r0
    17f8:	11 f4       	brne	.+4      	; 0x17fe <__fp_round+0xc>
    17fa:	88 23       	and	r24, r24
    17fc:	52 f0       	brmi	.+20     	; 0x1812 <__fp_round+0x20>
    17fe:	bb 0f       	add	r27, r27
    1800:	40 f4       	brcc	.+16     	; 0x1812 <__fp_round+0x20>
    1802:	bf 2b       	or	r27, r31
    1804:	11 f4       	brne	.+4      	; 0x180a <__fp_round+0x18>
    1806:	60 ff       	sbrs	r22, 0
    1808:	04 c0       	rjmp	.+8      	; 0x1812 <__fp_round+0x20>
    180a:	6f 5f       	subi	r22, 0xFF	; 255
    180c:	7f 4f       	sbci	r23, 0xFF	; 255
    180e:	8f 4f       	sbci	r24, 0xFF	; 255
    1810:	9f 4f       	sbci	r25, 0xFF	; 255
    1812:	08 95       	ret

00001814 <__fp_split3>:
    1814:	57 fd       	sbrc	r21, 7
    1816:	90 58       	subi	r25, 0x80	; 128
    1818:	44 0f       	add	r20, r20
    181a:	55 1f       	adc	r21, r21
    181c:	59 f0       	breq	.+22     	; 0x1834 <__fp_splitA+0x10>
    181e:	5f 3f       	cpi	r21, 0xFF	; 255
    1820:	71 f0       	breq	.+28     	; 0x183e <__fp_splitA+0x1a>
    1822:	47 95       	ror	r20

00001824 <__fp_splitA>:
    1824:	88 0f       	add	r24, r24
    1826:	97 fb       	bst	r25, 7
    1828:	99 1f       	adc	r25, r25
    182a:	61 f0       	breq	.+24     	; 0x1844 <__fp_splitA+0x20>
    182c:	9f 3f       	cpi	r25, 0xFF	; 255
    182e:	79 f0       	breq	.+30     	; 0x184e <__fp_splitA+0x2a>
    1830:	87 95       	ror	r24
    1832:	08 95       	ret
    1834:	12 16       	cp	r1, r18
    1836:	13 06       	cpc	r1, r19
    1838:	14 06       	cpc	r1, r20
    183a:	55 1f       	adc	r21, r21
    183c:	f2 cf       	rjmp	.-28     	; 0x1822 <__fp_split3+0xe>
    183e:	46 95       	lsr	r20
    1840:	f1 df       	rcall	.-30     	; 0x1824 <__fp_splitA>
    1842:	08 c0       	rjmp	.+16     	; 0x1854 <__fp_splitA+0x30>
    1844:	16 16       	cp	r1, r22
    1846:	17 06       	cpc	r1, r23
    1848:	18 06       	cpc	r1, r24
    184a:	99 1f       	adc	r25, r25
    184c:	f1 cf       	rjmp	.-30     	; 0x1830 <__fp_splitA+0xc>
    184e:	86 95       	lsr	r24
    1850:	71 05       	cpc	r23, r1
    1852:	61 05       	cpc	r22, r1
    1854:	08 94       	sec
    1856:	08 95       	ret

00001858 <__fp_zero>:
    1858:	e8 94       	clt

0000185a <__fp_szero>:
    185a:	bb 27       	eor	r27, r27
    185c:	66 27       	eor	r22, r22
    185e:	77 27       	eor	r23, r23
    1860:	cb 01       	movw	r24, r22
    1862:	97 f9       	bld	r25, 7
    1864:	08 95       	ret

00001866 <__mulsf3>:
    1866:	0e 94 46 0c 	call	0x188c	; 0x188c <__mulsf3x>
    186a:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <__fp_round>
    186e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fp_pscA>
    1872:	38 f0       	brcs	.+14     	; 0x1882 <__mulsf3+0x1c>
    1874:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__fp_pscB>
    1878:	20 f0       	brcs	.+8      	; 0x1882 <__mulsf3+0x1c>
    187a:	95 23       	and	r25, r21
    187c:	11 f0       	breq	.+4      	; 0x1882 <__mulsf3+0x1c>
    187e:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__fp_inf>
    1882:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__fp_nan>
    1886:	11 24       	eor	r1, r1
    1888:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_szero>

0000188c <__mulsf3x>:
    188c:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__fp_split3>
    1890:	70 f3       	brcs	.-36     	; 0x186e <__mulsf3+0x8>

00001892 <__mulsf3_pse>:
    1892:	95 9f       	mul	r25, r21
    1894:	c1 f3       	breq	.-16     	; 0x1886 <__mulsf3+0x20>
    1896:	95 0f       	add	r25, r21
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	55 1f       	adc	r21, r21
    189c:	62 9f       	mul	r22, r18
    189e:	f0 01       	movw	r30, r0
    18a0:	72 9f       	mul	r23, r18
    18a2:	bb 27       	eor	r27, r27
    18a4:	f0 0d       	add	r31, r0
    18a6:	b1 1d       	adc	r27, r1
    18a8:	63 9f       	mul	r22, r19
    18aa:	aa 27       	eor	r26, r26
    18ac:	f0 0d       	add	r31, r0
    18ae:	b1 1d       	adc	r27, r1
    18b0:	aa 1f       	adc	r26, r26
    18b2:	64 9f       	mul	r22, r20
    18b4:	66 27       	eor	r22, r22
    18b6:	b0 0d       	add	r27, r0
    18b8:	a1 1d       	adc	r26, r1
    18ba:	66 1f       	adc	r22, r22
    18bc:	82 9f       	mul	r24, r18
    18be:	22 27       	eor	r18, r18
    18c0:	b0 0d       	add	r27, r0
    18c2:	a1 1d       	adc	r26, r1
    18c4:	62 1f       	adc	r22, r18
    18c6:	73 9f       	mul	r23, r19
    18c8:	b0 0d       	add	r27, r0
    18ca:	a1 1d       	adc	r26, r1
    18cc:	62 1f       	adc	r22, r18
    18ce:	83 9f       	mul	r24, r19
    18d0:	a0 0d       	add	r26, r0
    18d2:	61 1d       	adc	r22, r1
    18d4:	22 1f       	adc	r18, r18
    18d6:	74 9f       	mul	r23, r20
    18d8:	33 27       	eor	r19, r19
    18da:	a0 0d       	add	r26, r0
    18dc:	61 1d       	adc	r22, r1
    18de:	23 1f       	adc	r18, r19
    18e0:	84 9f       	mul	r24, r20
    18e2:	60 0d       	add	r22, r0
    18e4:	21 1d       	adc	r18, r1
    18e6:	82 2f       	mov	r24, r18
    18e8:	76 2f       	mov	r23, r22
    18ea:	6a 2f       	mov	r22, r26
    18ec:	11 24       	eor	r1, r1
    18ee:	9f 57       	subi	r25, 0x7F	; 127
    18f0:	50 40       	sbci	r21, 0x00	; 0
    18f2:	9a f0       	brmi	.+38     	; 0x191a <__mulsf3_pse+0x88>
    18f4:	f1 f0       	breq	.+60     	; 0x1932 <__mulsf3_pse+0xa0>
    18f6:	88 23       	and	r24, r24
    18f8:	4a f0       	brmi	.+18     	; 0x190c <__mulsf3_pse+0x7a>
    18fa:	ee 0f       	add	r30, r30
    18fc:	ff 1f       	adc	r31, r31
    18fe:	bb 1f       	adc	r27, r27
    1900:	66 1f       	adc	r22, r22
    1902:	77 1f       	adc	r23, r23
    1904:	88 1f       	adc	r24, r24
    1906:	91 50       	subi	r25, 0x01	; 1
    1908:	50 40       	sbci	r21, 0x00	; 0
    190a:	a9 f7       	brne	.-22     	; 0x18f6 <__mulsf3_pse+0x64>
    190c:	9e 3f       	cpi	r25, 0xFE	; 254
    190e:	51 05       	cpc	r21, r1
    1910:	80 f0       	brcs	.+32     	; 0x1932 <__mulsf3_pse+0xa0>
    1912:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__fp_inf>
    1916:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_szero>
    191a:	5f 3f       	cpi	r21, 0xFF	; 255
    191c:	e4 f3       	brlt	.-8      	; 0x1916 <__mulsf3_pse+0x84>
    191e:	98 3e       	cpi	r25, 0xE8	; 232
    1920:	d4 f3       	brlt	.-12     	; 0x1916 <__mulsf3_pse+0x84>
    1922:	86 95       	lsr	r24
    1924:	77 95       	ror	r23
    1926:	67 95       	ror	r22
    1928:	b7 95       	ror	r27
    192a:	f7 95       	ror	r31
    192c:	e7 95       	ror	r30
    192e:	9f 5f       	subi	r25, 0xFF	; 255
    1930:	c1 f7       	brne	.-16     	; 0x1922 <__mulsf3_pse+0x90>
    1932:	fe 2b       	or	r31, r30
    1934:	88 0f       	add	r24, r24
    1936:	91 1d       	adc	r25, r1
    1938:	96 95       	lsr	r25
    193a:	87 95       	ror	r24
    193c:	97 f9       	bld	r25, 7
    193e:	08 95       	ret

00001940 <__mulsi3>:
    1940:	db 01       	movw	r26, r22
    1942:	8f 93       	push	r24
    1944:	9f 93       	push	r25
    1946:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__muluhisi3>
    194a:	bf 91       	pop	r27
    194c:	af 91       	pop	r26
    194e:	a2 9f       	mul	r26, r18
    1950:	80 0d       	add	r24, r0
    1952:	91 1d       	adc	r25, r1
    1954:	a3 9f       	mul	r26, r19
    1956:	90 0d       	add	r25, r0
    1958:	b2 9f       	mul	r27, r18
    195a:	90 0d       	add	r25, r0
    195c:	11 24       	eor	r1, r1
    195e:	08 95       	ret

00001960 <__divmodsi4>:
    1960:	05 2e       	mov	r0, r21
    1962:	97 fb       	bst	r25, 7
    1964:	1e f4       	brtc	.+6      	; 0x196c <__divmodsi4+0xc>
    1966:	00 94       	com	r0
    1968:	0e 94 c7 0c 	call	0x198e	; 0x198e <__negsi2>
    196c:	57 fd       	sbrc	r21, 7
    196e:	07 d0       	rcall	.+14     	; 0x197e <__divmodsi4_neg2>
    1970:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__udivmodsi4>
    1974:	07 fc       	sbrc	r0, 7
    1976:	03 d0       	rcall	.+6      	; 0x197e <__divmodsi4_neg2>
    1978:	4e f4       	brtc	.+18     	; 0x198c <__divmodsi4_exit>
    197a:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <__negsi2>

0000197e <__divmodsi4_neg2>:
    197e:	50 95       	com	r21
    1980:	40 95       	com	r20
    1982:	30 95       	com	r19
    1984:	21 95       	neg	r18
    1986:	3f 4f       	sbci	r19, 0xFF	; 255
    1988:	4f 4f       	sbci	r20, 0xFF	; 255
    198a:	5f 4f       	sbci	r21, 0xFF	; 255

0000198c <__divmodsi4_exit>:
    198c:	08 95       	ret

0000198e <__negsi2>:
    198e:	90 95       	com	r25
    1990:	80 95       	com	r24
    1992:	70 95       	com	r23
    1994:	61 95       	neg	r22
    1996:	7f 4f       	sbci	r23, 0xFF	; 255
    1998:	8f 4f       	sbci	r24, 0xFF	; 255
    199a:	9f 4f       	sbci	r25, 0xFF	; 255
    199c:	08 95       	ret

0000199e <__umulhisi3>:
    199e:	a2 9f       	mul	r26, r18
    19a0:	b0 01       	movw	r22, r0
    19a2:	b3 9f       	mul	r27, r19
    19a4:	c0 01       	movw	r24, r0
    19a6:	a3 9f       	mul	r26, r19
    19a8:	70 0d       	add	r23, r0
    19aa:	81 1d       	adc	r24, r1
    19ac:	11 24       	eor	r1, r1
    19ae:	91 1d       	adc	r25, r1
    19b0:	b2 9f       	mul	r27, r18
    19b2:	70 0d       	add	r23, r0
    19b4:	81 1d       	adc	r24, r1
    19b6:	11 24       	eor	r1, r1
    19b8:	91 1d       	adc	r25, r1
    19ba:	08 95       	ret

000019bc <__muluhisi3>:
    19bc:	0e 94 cf 0c 	call	0x199e	; 0x199e <__umulhisi3>
    19c0:	a5 9f       	mul	r26, r21
    19c2:	90 0d       	add	r25, r0
    19c4:	b4 9f       	mul	r27, r20
    19c6:	90 0d       	add	r25, r0
    19c8:	a4 9f       	mul	r26, r20
    19ca:	80 0d       	add	r24, r0
    19cc:	91 1d       	adc	r25, r1
    19ce:	11 24       	eor	r1, r1
    19d0:	08 95       	ret

000019d2 <__udivmodsi4>:
    19d2:	a1 e2       	ldi	r26, 0x21	; 33
    19d4:	1a 2e       	mov	r1, r26
    19d6:	aa 1b       	sub	r26, r26
    19d8:	bb 1b       	sub	r27, r27
    19da:	fd 01       	movw	r30, r26
    19dc:	0d c0       	rjmp	.+26     	; 0x19f8 <__udivmodsi4_ep>

000019de <__udivmodsi4_loop>:
    19de:	aa 1f       	adc	r26, r26
    19e0:	bb 1f       	adc	r27, r27
    19e2:	ee 1f       	adc	r30, r30
    19e4:	ff 1f       	adc	r31, r31
    19e6:	a2 17       	cp	r26, r18
    19e8:	b3 07       	cpc	r27, r19
    19ea:	e4 07       	cpc	r30, r20
    19ec:	f5 07       	cpc	r31, r21
    19ee:	20 f0       	brcs	.+8      	; 0x19f8 <__udivmodsi4_ep>
    19f0:	a2 1b       	sub	r26, r18
    19f2:	b3 0b       	sbc	r27, r19
    19f4:	e4 0b       	sbc	r30, r20
    19f6:	f5 0b       	sbc	r31, r21

000019f8 <__udivmodsi4_ep>:
    19f8:	66 1f       	adc	r22, r22
    19fa:	77 1f       	adc	r23, r23
    19fc:	88 1f       	adc	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	1a 94       	dec	r1
    1a02:	69 f7       	brne	.-38     	; 0x19de <__udivmodsi4_loop>
    1a04:	60 95       	com	r22
    1a06:	70 95       	com	r23
    1a08:	80 95       	com	r24
    1a0a:	90 95       	com	r25
    1a0c:	9b 01       	movw	r18, r22
    1a0e:	ac 01       	movw	r20, r24
    1a10:	bd 01       	movw	r22, r26
    1a12:	cf 01       	movw	r24, r30
    1a14:	08 95       	ret

00001a16 <_exit>:
    1a16:	f8 94       	cli

00001a18 <__stop_program>:
    1a18:	ff cf       	rjmp	.-2      	; 0x1a18 <__stop_program>
